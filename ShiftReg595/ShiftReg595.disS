
c:\Dokumente und Einstellungen\Administrator\Lokale Einstellungen\Temp\buildee46fb344f591937b0f338e7598e16fc.tmp\ShiftReg595.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
       0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_10>
	if (len == 0 || find.len == 0) return;
      2c:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__vector_11>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
	int diff = replace.len - find.len;
      44:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_17>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
	char *readFrom = buffer;
      50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
	char *foundAt;
	if (diff == 0) {
      54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_23>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
			memcpy(foundAt, replace.buffer, replace.len);
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
			readFrom = foundAt + replace.len;
      7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
		}
	} else if (diff < 0) {
      88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
			unsigned int n = foundAt - readFrom;
      ac:	07 03       	mulsu	r16, r23
      ae:	0a 03       	fmul	r16, r18
			memcpy(writeTo, readFrom, n);
      b0:	f9 02       	muls	r31, r25
      b2:	fd 02       	muls	r31, r29
      b4:	03 03       	mulsu	r16, r19
      b6:	2b 03       	fmul	r18, r19
      b8:	2b 03       	fmul	r18, r19
			writeTo += n;
      ba:	2b 03       	fmul	r18, r19
      bc:	0e 03       	fmul	r16, r22
			memcpy(writeTo, replace.buffer, replace.len);
      be:	12 03       	mulsu	r17, r18
      c0:	16 03       	mulsu	r17, r22
      c2:	1c 03       	fmul	r17, r20
      c4:	20 03       	mulsu	r18, r16
      c6:	2b 03       	fmul	r18, r19
      c8:	26 03       	mulsu	r18, r22

000000ca <__trampolines_end>:
      ca:	00 00       	nop
      cc:	00 02       	muls	r16, r16
			writeTo += replace.len;
      ce:	00 09       	sbc	r16, r0
      d0:	0f 00       	.word	0x000f	; ????
      d2:	00 03       	mulsu	r16, r16
      d4:	04 01       	movw	r0, r8
      d6:	00 0c       	add	r0, r0
	...

000000e9 <digital_pin_to_bit_mask_PGM>:
			readFrom = foundAt + find.len;
			len += diff;
      e9:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
      f9:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000108 <digital_pin_to_port_PGM>:
     108:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     118:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000127 <port_to_output_PGM>:
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
     127:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000135 <port_to_mode_PGM>:
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
     135:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000143 <_cdcInterface>:
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
     143:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
		int index = len - 1;
     153:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
     163:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
			readFrom = buffer + index + find.len;
     173:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

00000185 <USB_DeviceDescriptorB>:
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
     185:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
			len += diff;
     195:	03 01                                               ..

00000197 <USB_DeviceDescriptor>:
     197:	12 01 00 02 00 00 00 40 41 23 36 80 00 01 01 02     .......@A#6.....
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
     1a7:	03 01                                               ..

000001a9 <STRING_MANUFACTURER>:
     1a9:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000001b5 <STRING_PRODUCT>:
     1b5:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000001c6 <STRING_LANGUAGE>:
			index--;
		}
	}
}
     1c6:	04 03 09 04                                         ....

000001ca <__ctors_start>:
     1ca:	a1 04       	cpc	r10, r1

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	da e0       	ldi	r29, 0x0A	; 10
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61

000001d8 <__do_copy_data>:
     1d8:	11 e0       	ldi	r17, 0x01	; 1
     1da:	a0 e0       	ldi	r26, 0x00	; 0
     1dc:	b1 e0       	ldi	r27, 0x01	; 1
     1de:	ee ec       	ldi	r30, 0xCE	; 206
     1e0:	ff e1       	ldi	r31, 0x1F	; 31
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__do_copy_data+0x10>
     1e4:	05 90       	lpm	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	a8 3f       	cpi	r26, 0xF8	; 248
     1ea:	b1 07       	cpc	r27, r17
     1ec:	d9 f7       	brne	.-10     	; 0x1e4 <__do_copy_data+0xc>

000001ee <__do_clear_bss>:
     1ee:	22 e0       	ldi	r18, 0x02	; 2
     1f0:	a8 ef       	ldi	r26, 0xF8	; 248
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <.do_clear_bss_start>

000001f6 <.do_clear_bss_loop>:
     1f6:	1d 92       	st	X+, r1

000001f8 <.do_clear_bss_start>:
     1f8:	a6 37       	cpi	r26, 0x76	; 118
     1fa:	b2 07       	cpc	r27, r18
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <.do_clear_bss_loop>

000001fe <__do_global_ctors>:
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	cc ec       	ldi	r28, 0xCC	; 204
     202:	d1 e0       	ldi	r29, 0x01	; 1
     204:	04 c0       	rjmp	.+8      	; 0x20e <__do_global_ctors+0x10>
     206:	22 97       	sbiw	r28, 0x02	; 2
     208:	fe 01       	movw	r30, r28
     20a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__tablejump__>
     20e:	ca 3c       	cpi	r28, 0xCA	; 202
     210:	d1 07       	cpc	r29, r17
     212:	c9 f7       	brne	.-14     	; 0x206 <__do_global_ctors+0x8>
     214:	0e 94 cc 0b 	call	0x1798	; 0x1798 <main>
     218:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <_Z20configure_interruptsv>:
#define TIMER2_PRESCALE_BY_128  ((1 << CS22)               | (1 << CS20)) // 125.000 MHz /   8.0 µs
#define TIMER2_PRESCALE_BY_256  ((1 << CS22) | (1 << CS21)              ) // 62.500 KHz /   16.0 µs
#define TIMER2_PRESCALE_BY_1024 ((1 << CS22) | (1 << CS21) | (1 << CS20)) // 15.625 KHz /   64.0 µs

void configure_interrupts(void) {
  noInterrupts();
     220:	f8 94       	cli
  
  // Timer 1 (16 bit)
  TCCR1A =  ((1 << WGM11) & 0x00) | ((1 << WGM10) & 0x00);                          // TIMER1 CTC mode ("Clear Timer on Compare")
     222:	10 92 80 00 	sts	0x0080, r1
  TCCR1B =  ((1 << WGM13) & 0x00) | ((1 << WGM12) & 0xFF) | TIMER1_PRESCALE_BY_1;   // TIMER1 CTC mode, prescaling
     226:	89 e0       	ldi	r24, 0x09	; 9
     228:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 |= (1 << OCIE1A);  // enable compare interrupt for TIMER1
     22c:	ef e6       	ldi	r30, 0x6F	; 111
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	82 60       	ori	r24, 0x02	; 2
     234:	80 83       	st	Z, r24
  OCR1A  = (50 * 16) - 1;   // compare match register
     236:	8f e1       	ldi	r24, 0x1F	; 31
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	90 93 89 00 	sts	0x0089, r25
     23e:	80 93 88 00 	sts	0x0088, r24

  // Timer 3 (16 bit)
  TCCR3A =  ((1 << WGM31) & 0x00) | ((1 << WGM30) & 0x00);                        // TIMER3 normal mode
     242:	10 92 90 00 	sts	0x0090, r1
  TCCR3B =  ((1 << WGM33) & 0x00) | ((1 << WGM32) & 0x00) | TIMER3_PRESCALE_BY_1; // TIMER3 normal mode @ 2MHz / 0.5µs period (overflow after 32.768 ms)
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	80 93 91 00 	sts	0x0091, r24
  TIMSK3 = 0; // no interrupt from Timer3
     24c:	10 92 71 00 	sts	0x0071, r1

/* there is no TIMER2 on the Atmega32uXX
  TCCR2 = 0 | TIMER2_PRESCALE_BY_8; // TIMER2 in normal mode @ 2MHz / 0.5µs period (overflow after 128 µs)
  TIMSK2 &= ~(_BV(TOIE2) | _BV(OCIE2A) | _BV(OCIE2B)); // no interrupts from TIMER2
*/ 
  interrupts();
     250:	78 94       	sei
     252:	08 95       	ret

00000254 <setup>:
#define s595_shift_LO() (PORTD =                  0); s595_SHCP_HI; //(s595_state_int <<= 1)  //  s595_SHCP_LO; s595_DS_LO; s595_SHCP_HI //    
#define s595_shift_HI() (PORTD = (1 << s595_DS_bit)); s595_SHCP_HI; //(s595_state_int <<= 1); (s595_state_int |= 1);   //  s595_SHCP_LO; s595_DS_HI; s595_SHCP_HI //   


void setup() {
  Serial.begin(57600);
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	51 ee       	ldi	r21, 0xE1	; 225
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	85 e0       	ldi	r24, 0x05	; 5
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN7Serial_5beginEm>

  DDRD |= B01011111;
     264:	8a b1       	in	r24, 0x0a	; 10
     266:	8f 65       	ori	r24, 0x5F	; 95
     268:	8a b9       	out	0x0a, r24	; 10
  
  pinMode(s595_OE_pin,   OUTPUT);  // OE (active-low)
     26a:	61 e0       	ldi	r22, 0x01	; 1
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	0e 94 2c 03 	call	0x658	; 0x658 <pinMode>
  pinMode(s595_MR_pin,   OUTPUT);  // MR (active-low)
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	0e 94 2c 03 	call	0x658	; 0x658 <pinMode>
  pinMode(s595_STCP_pin, OUTPUT);  // STCP ("latch-out")
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	0e 94 2c 03 	call	0x658	; 0x658 <pinMode>
  pinMode(s595_SHCP_pin, OUTPUT);  // SHCP ("shift-out")
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	0e 94 2c 03 	call	0x658	; 0x658 <pinMode>
  pinMode(s595_DS_pin,   OUTPUT);  // DS (serial data)
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 2c 03 	call	0x658	; 0x658 <pinMode>

  digitalWrite(s595_OE_pin, HIGH);
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	86 e0       	ldi	r24, 0x06	; 6
     296:	0e 94 65 03 	call	0x6ca	; 0x6ca <digitalWrite>
  digitalWrite(s595_MR_pin, LOW);
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	0e 94 65 03 	call	0x6ca	; 0x6ca <digitalWrite>
  digitalWrite(s595_STCP_pin, LOW);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <digitalWrite>
  digitalWrite(s595_SHCP_pin, LOW);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	0e 94 65 03 	call	0x6ca	; 0x6ca <digitalWrite>
  digitalWrite(s595_DS_pin, LOW);
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 65 03 	call	0x6ca	; 0x6ca <digitalWrite>
  
  s595_off();
     2ba:	5f 9a       	sbi	0x0b, 7	; 11
  s595_clear();
     2bc:	46 98       	cbi	0x08, 6	; 8
     2be:	46 9a       	sbi	0x08, 6	; 8
  s595_latch();
     2c0:	5c 98       	cbi	0x0b, 4	; 11
     2c2:	5c 9a       	sbi	0x0b, 4	; 11
  s595_on();
     2c4:	5f 98       	cbi	0x0b, 7	; 11

  configure_interrupts();
     2c6:	0c 94 10 01 	jmp	0x220	; 0x220 <_Z20configure_interruptsv>

000002ca <__vector_17>:
byte pwm_tick = pwm_tickCount;
byte pwm_row_index = pwm_rowCount;

byte rowBuf[(pwm_tickCount * pwm_columnCount) >> 3];

ISR(TIMER1_COMPA_vect) {
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	4f 93       	push	r20
     2da:	5f 93       	push	r21
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
  TCNT3 = 0;
     2e4:	10 92 95 00 	sts	0x0095, r1
     2e8:	10 92 94 00 	sts	0x0094, r1
  if (!timer_enabled) {
     2ec:	80 91 fa 01 	lds	r24, 0x01FA
     2f0:	88 23       	and	r24, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <__vector_17+0x2c>
     2f4:	93 c0       	rjmp	.+294    	; 0x41c <pwm_clock_out+0x98>
    return;
  }
 
  s595_latch(); // latch out what we've done last time
     2f6:	5c 98       	cbi	0x0b, 4	; 11
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
  s595_clear();
     2fa:	46 98       	cbi	0x08, 6	; 8
     2fc:	46 9a       	sbi	0x08, 6	; 8

  if (++pwm_tick >= pwm_tickCount) {
     2fe:	80 91 09 01 	lds	r24, 0x0109
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	80 93 09 01 	sts	0x0109, r24
     308:	80 32       	cpi	r24, 0x20	; 32
     30a:	60 f0       	brcs	.+24     	; 0x324 <__vector_17+0x5a>
    if (++pwm_row_index >= pwm_rowCount) {
     30c:	80 91 08 01 	lds	r24, 0x0108
     310:	8f 5f       	subi	r24, 0xFF	; 255
     312:	8a 30       	cpi	r24, 0x0A	; 10
     314:	18 f4       	brcc	.+6      	; 0x31c <__vector_17+0x52>
     316:	80 93 08 01 	sts	0x0108, r24
     31a:	02 c0       	rjmp	.+4      	; 0x320 <__vector_17+0x56>
      pwm_row_index = 0;
     31c:	10 92 08 01 	sts	0x0108, r1
    }
    pwm_tick = 0;
     320:	10 92 09 01 	sts	0x0109, r1
  }

  uint16_t temp = TCNT3;
     324:	20 91 94 00 	lds	r18, 0x0094
     328:	30 91 95 00 	lds	r19, 0x0095
  byte tick = pwm_tick;

  byte* rowData = (byte*)&data_rgb[pwm_row_index];
  if (pwm_row_index == 0) {
     32c:	80 91 08 01 	lds	r24, 0x0108
     330:	81 11       	cpse	r24, r1
     332:	74 c0       	rjmp	.+232    	; 0x41c <pwm_clock_out+0x98>

00000334 <pwm_tick_start>:
         "pwm_clock_out:                    ;                                           \n"
        "         sbi  0x0b, 0              ; 2       // SHCP hi on PORTD               \n"
        "         dec  r25                  ; 1       // next column (r25 was initialized with pwm_columnCount) \n" 
        "         brne pwm_tick_loop        ; 1/2     // repeat if r25 still > 0        \n"
        : [tick] "=&r" (tick) :
    );
     334:	40 91 09 01 	lds	r20, 0x0109
     338:	98 e1       	ldi	r25, 0x18	; 24

0000033a <pwm_tick_loop>:
     33a:	01 90       	ld	r0, Z+
     33c:	04 16       	cp	r0, r20
     33e:	50 f0       	brcs	.+20     	; 0x354 <rgb_XX1>

00000340 <rgb_XX0>:
     340:	01 90       	ld	r0, Z+
     342:	04 16       	cp	r0, r20
     344:	88 f0       	brcs	.+34     	; 0x368 <rgb_X10>

00000346 <rgb_X00>:
     346:	01 90       	ld	r0, Z+
     348:	04 16       	cp	r0, r20
     34a:	10 f0       	brcs	.+4      	; 0x350 <rgb_100>

0000034c <rgb_000>:
     34c:	0b b8       	out	0x0b, r0	; 11
     34e:	1a c0       	rjmp	.+52     	; 0x384 <pwm_clock_out>

00000350 <rgb_100>:
     350:	4b b8       	out	0x0b, r4	; 11
     352:	18 c0       	rjmp	.+48     	; 0x384 <pwm_clock_out>

00000354 <rgb_XX1>:
     354:	01 90       	ld	r0, Z+
     356:	04 16       	cp	r0, r20
     358:	70 f0       	brcs	.+28     	; 0x376 <rgb_X11>

0000035a <rgb_X01>:
     35a:	01 90       	ld	r0, Z+
     35c:	04 16       	cp	r0, r20
     35e:	10 f0       	brcs	.+4      	; 0x364 <rgb_101>

00000360 <rgb_001>:
     360:	1b b8       	out	0x0b, r1	; 11
     362:	10 c0       	rjmp	.+32     	; 0x384 <pwm_clock_out>

00000364 <rgb_101>:
     364:	5b b8       	out	0x0b, r5	; 11
     366:	0e c0       	rjmp	.+28     	; 0x384 <pwm_clock_out>

00000368 <rgb_X10>:
     368:	01 90       	ld	r0, Z+
     36a:	04 16       	cp	r0, r20
     36c:	10 f0       	brcs	.+4      	; 0x372 <rgb_110>

0000036e <rgb_010>:
     36e:	2b b8       	out	0x0b, r2	; 11
     370:	09 c0       	rjmp	.+18     	; 0x384 <pwm_clock_out>

00000372 <rgb_110>:
     372:	6b b8       	out	0x0b, r6	; 11
     374:	07 c0       	rjmp	.+14     	; 0x384 <pwm_clock_out>

00000376 <rgb_X11>:
     376:	01 90       	ld	r0, Z+
     378:	04 16       	cp	r0, r20
     37a:	10 f0       	brcs	.+4      	; 0x380 <rgb_111>

0000037c <rgb_011>:
     37c:	3b b8       	out	0x0b, r3	; 11
     37e:	02 c0       	rjmp	.+4      	; 0x384 <pwm_clock_out>

00000380 <rgb_111>:
     380:	7b b8       	out	0x0b, r7	; 11
     382:	00 c0       	rjmp	.+0      	; 0x384 <pwm_clock_out>

00000384 <pwm_clock_out>:
     384:	58 9a       	sbi	0x0b, 0	; 11
     386:	9a 95       	dec	r25
     388:	c1 f6       	brne	.-80     	; 0x33a <pwm_tick_loop>
     38a:	ea e0       	ldi	r30, 0x0A	; 10
     38c:	f1 e0       	ldi	r31, 0x01	; 1

    
    byte i = pwm_columnCount;
    while (i-- != 0) {  // faster than for "(byte i = 0; i < pwm_columnCount; i++)"
     38e:	99 e1       	ldi	r25, 0x19	; 25
     390:	91 50       	subi	r25, 0x01	; 1
     392:	91 f0       	breq	.+36     	; 0x3b8 <pwm_clock_out+0x34>
      byte out = 0;
 
      if (*rowData++ > tick) {
     394:	80 81       	ld	r24, Z
     396:	48 17       	cp	r20, r24
     398:	10 f0       	brcs	.+4      	; 0x39e <pwm_clock_out+0x1a>
    );

    
    byte i = pwm_columnCount;
    while (i-- != 0) {  // faster than for "(byte i = 0; i < pwm_columnCount; i++)"
      byte out = 0;
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <pwm_clock_out+0x1c>
 
      if (*rowData++ > tick) {
        out |= (1 << s595_DS_bit);  // "bank" a
     39e:	82 e0       	ldi	r24, 0x02	; 2
      }
      if (*rowData++ > tick) {  // "bank" b
     3a0:	51 81       	ldd	r21, Z+1	; 0x01
     3a2:	45 17       	cp	r20, r21
     3a4:	08 f4       	brcc	.+2      	; 0x3a8 <pwm_clock_out+0x24>
        out |= (1 << s595_DSb_bit);
     3a6:	84 60       	ori	r24, 0x04	; 4
      }
      if (*rowData++ > tick) {  // "bank" c
     3a8:	52 81       	ldd	r21, Z+2	; 0x02
     3aa:	45 17       	cp	r20, r21
     3ac:	08 f4       	brcc	.+2      	; 0x3b0 <pwm_clock_out+0x2c>
        out |= (1 << s595_DSc_bit);
     3ae:	88 60       	ori	r24, 0x08	; 8
      }
      PORTD = out; // also sets SHCP and STCP low
     3b0:	8b b9       	out	0x0b, r24	; 11
      s595_SHCP_HI;
     3b2:	58 9a       	sbi	0x0b, 0	; 11
     3b4:	33 96       	adiw	r30, 0x03	; 3
     3b6:	ec cf       	rjmp	.-40     	; 0x390 <pwm_clock_out+0xc>
*/
    
    }


    if (timer_intr || ((_pwm_tick >= pwm_tick) && (_pwm_tick < pwm_tickCount - 1))) {
     3b8:	40 91 fb 01 	lds	r20, 0x01FB
     3bc:	80 91 fc 01 	lds	r24, 0x01FC
     3c0:	90 91 fd 01 	lds	r25, 0x01FD
     3c4:	41 11       	cpse	r20, r1
     3c6:	0a c0       	rjmp	.+20     	; 0x3dc <pwm_clock_out+0x58>
     3c8:	50 91 fe 01 	lds	r21, 0x01FE
     3cc:	40 91 09 01 	lds	r20, 0x0109
     3d0:	54 17       	cp	r21, r20
     3d2:	50 f0       	brcs	.+20     	; 0x3e8 <pwm_clock_out+0x64>
     3d4:	50 91 fe 01 	lds	r21, 0x01FE
     3d8:	5f 31       	cpi	r21, 0x1F	; 31
     3da:	30 f4       	brcc	.+12     	; 0x3e8 <pwm_clock_out+0x64>
      missed++;
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	90 93 fd 01 	sts	0x01FD, r25
     3e2:	80 93 fc 01 	sts	0x01FC, r24
     3e6:	1a c0       	rjmp	.+52     	; 0x41c <pwm_clock_out+0x98>
    } else {
      _missed = missed;
     3e8:	90 93 00 02 	sts	0x0200, r25
     3ec:	80 93 ff 01 	sts	0x01FF, r24
      missed = 0;
     3f0:	10 92 fd 01 	sts	0x01FD, r1
     3f4:	10 92 fc 01 	sts	0x01FC, r1
      _pwm_tick = pwm_tick;
     3f8:	40 93 fe 01 	sts	0x01FE, r20
      _tm_1 = temp;
     3fc:	30 93 02 02 	sts	0x0202, r19
     400:	20 93 01 02 	sts	0x0201, r18
      _tm_0 = TCNT3 + 16; // add 16 cycles for rest of fn plus returning
     404:	80 91 94 00 	lds	r24, 0x0094
     408:	90 91 95 00 	lds	r25, 0x0095
     40c:	40 96       	adiw	r24, 0x10	; 16
     40e:	90 93 04 02 	sts	0x0204, r25
     412:	80 93 03 02 	sts	0x0203, r24
      timer_intr = true;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 fb 01 	sts	0x01FB, r24
    }

  }


}
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	5f 91       	pop	r21
     426:	4f 91       	pop	r20
     428:	3f 91       	pop	r19
     42a:	2f 91       	pop	r18
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	1f 90       	pop	r1
     434:	18 95       	reti

00000436 <loop>:
    }
  }
}

  
void loop() {
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
  char buf[33];

// if there's any serial available, read it:
  if (Serial) {
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 92 04 	call	0x924	; 0x924 <_ZN7Serial_cvbEv>
     44c:	81 11       	cpse	r24, r1
     44e:	0d c0       	rjmp	.+26     	; 0x46a <loop+0x34>
        Serial.println("ms");
      }
    } 
  }

  if (delay_ms == 0) {
     450:	80 91 06 01 	lds	r24, 0x0106
     454:	90 91 07 01 	lds	r25, 0x0107
     458:	89 2b       	or	r24, r25
     45a:	09 f0       	breq	.+2      	; 0x45e <loop+0x28>
     45c:	b8 c0       	rjmp	.+368    	; 0x5ce <loop+0x198>
    s595_off();
     45e:	5f 9a       	sbi	0x0b, 7	; 11
    i = 0;
     460:	10 92 f9 01 	sts	0x01F9, r1
     464:	10 92 f8 01 	sts	0x01F8, r1
     468:	b2 c0       	rjmp	.+356    	; 0x5ce <loop+0x198>
void loop() {
  char buf[33];

// if there's any serial available, read it:
  if (Serial) {
    timer_enabled = true;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	80 93 fa 01 	sts	0x01FA, r24
    if (timer_intr) {
     470:	80 91 fb 01 	lds	r24, 0x01FB
     474:	88 23       	and	r24, r24
     476:	09 f4       	brne	.+2      	; 0x47a <loop+0x44>
     478:	a2 c0       	rjmp	.+324    	; 0x5be <loop+0x188>
      uint16_t a      = _tm_0;
     47a:	c0 90 03 02 	lds	r12, 0x0203
     47e:	d0 90 04 02 	lds	r13, 0x0204
      uint16_t b      = _tm_1;
     482:	00 91 01 02 	lds	r16, 0x0201
     486:	10 91 02 02 	lds	r17, 0x0202
      uint16_t missed = _missed;
     48a:	c0 91 ff 01 	lds	r28, 0x01FF
     48e:	d0 91 00 02 	lds	r29, 0x0200
      uint8_t  tick   = _pwm_tick;
     492:	f0 90 fe 01 	lds	r15, 0x01FE
      timer_intr = false;
     496:	10 92 fb 01 	sts	0x01FB, r1
      Serial.print(a);
     49a:	4a e0       	ldi	r20, 0x0A	; 10
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	b6 01       	movw	r22, r12
     4a0:	85 e0       	ldi	r24, 0x05	; 5
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN5Print5printEji>
      Serial.print(" / ");
     4a8:	6d e9       	ldi	r22, 0x9D	; 157
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	85 e0       	ldi	r24, 0x05	; 5
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(b);
     4b4:	4a e0       	ldi	r20, 0x0A	; 10
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	b8 01       	movw	r22, r16
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN5Print5printEji>
      Serial.print(" cycles (");
     4c2:	61 ea       	ldi	r22, 0xA1	; 161
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	85 e0       	ldi	r24, 0x05	; 5
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(a * 0.0625);
     4ce:	b6 01       	movw	r22, r12
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__floatunsisf>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5d e3       	ldi	r21, 0x3D	; 61
     4e0:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__mulsf3>
     4e4:	ab 01       	movw	r20, r22
     4e6:	bc 01       	movw	r22, r24
     4e8:	22 e0       	ldi	r18, 0x02	; 2
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEdi>
      Serial.print(" / ");
     4f4:	6d e9       	ldi	r22, 0x9D	; 157
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(b * 0.0625);
     500:	b8 01       	movw	r22, r16
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__floatunsisf>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e8       	ldi	r20, 0x80	; 128
     510:	5d e3       	ldi	r21, 0x3D	; 61
     512:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__mulsf3>
     516:	ab 01       	movw	r20, r22
     518:	bc 01       	movw	r22, r24
     51a:	22 e0       	ldi	r18, 0x02	; 2
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	85 e0       	ldi	r24, 0x05	; 5
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEdi>
      Serial.print(" micros)");
     526:	6b ea       	ldi	r22, 0xAB	; 171
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	85 e0       	ldi	r24, 0x05	; 5
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(", s595_int: ");
      Serial.print(ltoa(((unsigned long)1 << pwm_columnCount) | s595_state_int, buf, 2));
      Serial.print(", s595_ext: ");
      Serial.print(ltoa(((unsigned long)1 << pwm_columnCount) | s595_state_ext, buf, 2));
      */
      Serial.print(", pwm_tick: ");
     532:	64 eb       	ldi	r22, 0xB4	; 180
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	85 e0       	ldi	r24, 0x05	; 5
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(tick);
     53e:	4a e0       	ldi	r20, 0x0A	; 10
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	6f 2d       	mov	r22, r15
     544:	85 e0       	ldi	r24, 0x05	; 5
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN5Print5printEhi>
      Serial.print(", missed: ");
     54c:	61 ec       	ldi	r22, 0xC1	; 193
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
      Serial.print(missed);
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	be 01       	movw	r22, r28
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN5Print5printEji>
      Serial.println();
     566:	85 e0       	ldi	r24, 0x05	; 5
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN5Print7printlnEv>
     56e:	27 c0       	rjmp	.+78     	; 0x5be <loop+0x188>
    }
    while (Serial.available() > 0) {
      delay_ms = Serial.parseInt();
     570:	41 e0       	ldi	r20, 0x01	; 1
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN6Stream8parseIntE13LookaheadModec>
     57e:	70 93 07 01 	sts	0x0107, r23
     582:	60 93 06 01 	sts	0x0106, r22
  
      if (Serial.read() == '\n') {
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN7Serial_4readEv>
     58e:	0a 97       	sbiw	r24, 0x0a	; 10
     590:	b1 f4       	brne	.+44     	; 0x5be <loop+0x188>
        Serial.print("delay: ");
     592:	6c ec       	ldi	r22, 0xCC	; 204
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	85 e0       	ldi	r24, 0x05	; 5
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN5Print5printEPKc>
        Serial.print(delay_ms);
     59e:	60 91 06 01 	lds	r22, 0x0106
     5a2:	70 91 07 01 	lds	r23, 0x0107
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	85 e0       	ldi	r24, 0x05	; 5
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 8c 05 	call	0xb18	; 0xb18 <_ZN5Print5printEii>
        Serial.println("ms");
     5b2:	64 ed       	ldi	r22, 0xD4	; 212
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	85 e0       	ldi	r24, 0x05	; 5
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_ZN5Print7printlnEPKc>
      Serial.print(tick);
      Serial.print(", missed: ");
      Serial.print(missed);
      Serial.println();
    }
    while (Serial.available() > 0) {
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN7Serial_9availableEv>
     5c6:	18 16       	cp	r1, r24
     5c8:	19 06       	cpc	r1, r25
     5ca:	94 f2       	brlt	.-92     	; 0x570 <loop+0x13a>
     5cc:	41 cf       	rjmp	.-382    	; 0x450 <loop+0x1a>
    delay(delay_ms);
    */
  }

  
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	df 90       	pop	r13
     5da:	cf 90       	pop	r12
     5dc:	08 95       	ret

000005de <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	ef 30       	cpi	r30, 0x0F	; 15
     5e6:	f1 05       	cpc	r31, r1
     5e8:	b0 f5       	brcc	.+108    	; 0x656 <turnOffPWM+0x78>
     5ea:	ea 5a       	subi	r30, 0xAA	; 170
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     5f2:	80 91 80 00 	lds	r24, 0x0080
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	03 c0       	rjmp	.+6      	; 0x600 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     5fa:	80 91 80 00 	lds	r24, 0x0080
     5fe:	8f 7d       	andi	r24, 0xDF	; 223
     600:	80 93 80 00 	sts	0x0080, r24
     604:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     606:	80 91 80 00 	lds	r24, 0x0080
     60a:	87 7f       	andi	r24, 0xF7	; 247
     60c:	f9 cf       	rjmp	.-14     	; 0x600 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     60e:	84 b5       	in	r24, 0x24	; 36
     610:	8f 77       	andi	r24, 0x7F	; 127
     612:	02 c0       	rjmp	.+4      	; 0x618 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     614:	84 b5       	in	r24, 0x24	; 36
     616:	8f 7d       	andi	r24, 0xDF	; 223
     618:	84 bd       	out	0x24, r24	; 36
     61a:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     61c:	80 91 90 00 	lds	r24, 0x0090
     620:	8f 77       	andi	r24, 0x7F	; 127
     622:	07 c0       	rjmp	.+14     	; 0x632 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     624:	80 91 90 00 	lds	r24, 0x0090
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	03 c0       	rjmp	.+6      	; 0x632 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     62c:	80 91 90 00 	lds	r24, 0x0090
     630:	87 7f       	andi	r24, 0xF7	; 247
     632:	80 93 90 00 	sts	0x0090, r24
     636:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     638:	80 91 c0 00 	lds	r24, 0x00C0
     63c:	8f 77       	andi	r24, 0x7F	; 127
     63e:	03 c0       	rjmp	.+6      	; 0x646 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     640:	80 91 c0 00 	lds	r24, 0x00C0
     644:	8f 7d       	andi	r24, 0xDF	; 223
     646:	80 93 c0 00 	sts	0x00C0, r24
     64a:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
     64c:	80 91 c2 00 	lds	r24, 0x00C2
     650:	87 7f       	andi	r24, 0xF7	; 247
     652:	80 93 c2 00 	sts	0x00C2, r24
     656:	08 95       	ret

00000658 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	e7 51       	subi	r30, 0x17	; 23
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     666:	fc 01       	movw	r30, r24
     668:	e8 5f       	subi	r30, 0xF8	; 248
     66a:	fe 4f       	sbci	r31, 0xFE	; 254
     66c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     66e:	88 23       	and	r24, r24
     670:	49 f1       	breq	.+82     	; 0x6c4 <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	fc 01       	movw	r30, r24
     67a:	eb 5c       	subi	r30, 0xCB	; 203
     67c:	fe 4f       	sbci	r31, 0xFE	; 254
     67e:	a5 91       	lpm	r26, Z+
     680:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     682:	89 5d       	subi	r24, 0xD9	; 217
     684:	9e 4f       	sbci	r25, 0xFE	; 254
     686:	fc 01       	movw	r30, r24
     688:	c5 91       	lpm	r28, Z+
     68a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     68c:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
     68e:	61 11       	cpse	r22, r1
     690:	08 c0       	rjmp	.+16     	; 0x6a2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
     692:	f8 94       	cli
		*reg &= ~bit;
     694:	8c 91       	ld	r24, X
     696:	20 95       	com	r18
     698:	82 23       	and	r24, r18
     69a:	8c 93       	st	X, r24
		*out &= ~bit;
     69c:	88 81       	ld	r24, Y
     69e:	82 23       	and	r24, r18
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     6a2:	62 30       	cpi	r22, 0x02	; 2
     6a4:	51 f4       	brne	.+20     	; 0x6ba <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
     6a6:	f8 94       	cli
		*reg &= ~bit;
     6a8:	8c 91       	ld	r24, X
     6aa:	32 2f       	mov	r19, r18
     6ac:	30 95       	com	r19
     6ae:	83 23       	and	r24, r19
     6b0:	8c 93       	st	X, r24
		*out |= bit;
     6b2:	88 81       	ld	r24, Y
     6b4:	82 2b       	or	r24, r18
     6b6:	88 83       	st	Y, r24
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
     6ba:	f8 94       	cli
		*reg |= bit;
     6bc:	8c 91       	ld	r24, X
     6be:	82 2b       	or	r24, r18
     6c0:	8c 93       	st	X, r24
		SREG = oldSREG;
     6c2:	9f bf       	out	0x3f, r25	; 63
	}
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	1f 92       	push	r1
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	e6 53       	subi	r30, 0x36	; 54
     6e0:	ff 4f       	sbci	r31, 0xFF	; 255
     6e2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     6e4:	f9 01       	movw	r30, r18
     6e6:	e7 51       	subi	r30, 0x17	; 23
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     6ec:	f9 01       	movw	r30, r18
     6ee:	e8 5f       	subi	r30, 0xF8	; 248
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     6f4:	00 23       	and	r16, r16
     6f6:	c9 f0       	breq	.+50     	; 0x72a <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     6f8:	88 23       	and	r24, r24
     6fa:	21 f0       	breq	.+8      	; 0x704 <digitalWrite+0x3a>
     6fc:	69 83       	std	Y+1, r22	; 0x01
     6fe:	0e 94 ef 02 	call	0x5de	; 0x5de <turnOffPWM>
     702:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     704:	e0 2f       	mov	r30, r16
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	e9 5d       	subi	r30, 0xD9	; 217
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	a5 91       	lpm	r26, Z+
     712:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     714:	9f b7       	in	r25, 0x3f	; 63
	cli();
     716:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     718:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
     71a:	61 11       	cpse	r22, r1
     71c:	03 c0       	rjmp	.+6      	; 0x724 <digitalWrite+0x5a>
		*out &= ~bit;
     71e:	10 95       	com	r17
     720:	81 23       	and	r24, r17
     722:	01 c0       	rjmp	.+2      	; 0x726 <digitalWrite+0x5c>
	} else {
		*out |= bit;
     724:	81 2b       	or	r24, r17
     726:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     728:	9f bf       	out	0x3f, r25	; 63
}
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <_ZN7Serial_5writeEh>:
{
	USB_Flush(CDC_TX);
}

size_t Serial_::write(uint8_t c)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	69 83       	std	Y+1, r22	; 0x01
	return write(&c, 1);
     742:	dc 01       	movw	r26, r24
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	02 80       	ldd	r0, Z+2	; 0x02
     74a:	f3 81       	ldd	r31, Z+3	; 0x03
     74c:	e0 2d       	mov	r30, r0
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	be 01       	movw	r22, r28
     754:	6f 5f       	subi	r22, 0xFF	; 255
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	09 95       	icall
}
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <_ZN7Serial_4peekEv>:
	}
	return USB_Available(CDC_RX);
}

int Serial_::peek(void)
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
	if (peek_buffer < 0)
     768:	8c 85       	ldd	r24, Y+12	; 0x0c
     76a:	9d 85       	ldd	r25, Y+13	; 0x0d
     76c:	97 ff       	sbrs	r25, 7
     76e:	05 c0       	rjmp	.+10     	; 0x77a <_ZN7Serial_4peekEv+0x18>
		peek_buffer = USB_Recv(CDC_RX);
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 8d 08 	call	0x111a	; 0x111a <_Z8USB_Recvh>
     776:	9d 87       	std	Y+13, r25	; 0x0d
     778:	8c 87       	std	Y+12, r24	; 0x0c
	return peek_buffer;
}
     77a:	8c 85       	ldd	r24, Y+12	; 0x0c
     77c:	9d 85       	ldd	r25, Y+13	; 0x0d
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <_ZN7Serial_5flushEv>:
	return USB_SendSpace(CDC_TX);
}

void Serial_::flush(void)
{
	USB_Flush(CDC_TX);
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <_Z9USB_Flushh>

0000078a <_ZN7Serial_9availableEv>:
{
}

int Serial_::available(void)
{
	if (peek_buffer >= 0) {
     78a:	fc 01       	movw	r30, r24
     78c:	84 85       	ldd	r24, Z+12	; 0x0c
     78e:	95 85       	ldd	r25, Z+13	; 0x0d
     790:	97 fd       	sbrc	r25, 7
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <_ZN7Serial_9availableEv+0x16>
		return 1 + USB_Available(CDC_RX);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 35 08 	call	0x106a	; 0x106a <_Z13USB_Availableh>
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	08 95       	ret
	}
	return USB_Available(CDC_RX);
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 35 08 	call	0x106a	; 0x106a <_Z13USB_Availableh>
     7a6:	90 e0       	ldi	r25, 0x00	; 0
}
     7a8:	08 95       	ret

000007aa <_ZN7Serial_4readEv>:
		peek_buffer = USB_Recv(CDC_RX);
	return peek_buffer;
}

int Serial_::read(void)
{
     7aa:	fc 01       	movw	r30, r24
	if (peek_buffer >= 0) {
     7ac:	84 85       	ldd	r24, Z+12	; 0x0c
     7ae:	95 85       	ldd	r25, Z+13	; 0x0d
     7b0:	97 fd       	sbrc	r25, 7
     7b2:	05 c0       	rjmp	.+10     	; 0x7be <_ZN7Serial_4readEv+0x14>
		int c = peek_buffer;
		peek_buffer = -1;
     7b4:	2f ef       	ldi	r18, 0xFF	; 255
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	35 87       	std	Z+13, r19	; 0x0d
     7ba:	24 87       	std	Z+12, r18	; 0x0c
		return c;
     7bc:	08 95       	ret
	}
	return USB_Recv(CDC_RX);
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	0c 94 8d 08 	jmp	0x111a	; 0x111a <_Z8USB_Recvh>

000007c4 <_ZN7Serial_5writeEPKhj>:
{
	return write(&c, 1);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
	 the connection is closed are lost - just like with a UART. */
	
	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)	{
     7ca:	80 91 95 01 	lds	r24, 0x0195
     7ce:	88 23       	and	r24, r24
     7d0:	31 f0       	breq	.+12     	; 0x7de <_ZN7Serial_5writeEPKhj+0x1a>
		int r = USB_Send(CDC_TX,buffer,size);
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	0e 94 be 08 	call	0x117c	; 0x117c <_Z8USB_SendhPKvi>
		if (r > 0) {
     7d8:	18 16       	cp	r1, r24
     7da:	19 06       	cpc	r1, r25
     7dc:	34 f0       	brlt	.+12     	; 0x7ea <_ZN7Serial_5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	9b 83       	std	Y+3, r25	; 0x03
     7e4:	8a 83       	std	Y+2, r24	; 0x02
			setWriteError();
			return 0;
		}
	}
	setWriteError();
	return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <_Z16CDC_GetInterfacePh>:
	D_ENDPOINT(USB_ENDPOINT_IN (CDC_ENDPOINT_IN ),USB_ENDPOINT_TYPE_BULK,USB_EP_SIZE,0)
};

int CDC_GetInterface(u8* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 81       	ld	r18, Z
     7f4:	2e 5f       	subi	r18, 0xFE	; 254
     7f6:	20 83       	st	Z, r18
	return USB_SendControl(TRANSFER_PGM,&_cdcInterface,sizeof(_cdcInterface));
     7f8:	42 e4       	ldi	r20, 0x42	; 66
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	63 e4       	ldi	r22, 0x43	; 67
     7fe:	71 e0       	ldi	r23, 0x01	; 1
     800:	80 e8       	ldi	r24, 0x80	; 128
     802:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_Z15USB_SendControlhPKvi>

00000806 <_Z9CDC_SetupR8USBSetup>:
}

bool CDC_Setup(USBSetup& setup)
{
     806:	fc 01       	movw	r30, r24
	u8 r = setup.bRequest;
     808:	21 81       	ldd	r18, Z+1	; 0x01
	u8 requestType = setup.bmRequestType;
     80a:	80 81       	ld	r24, Z

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
     80c:	81 3a       	cpi	r24, 0xA1	; 161
     80e:	59 f4       	brne	.+22     	; 0x826 <_Z9CDC_SetupR8USBSetup+0x20>
	{
		if (CDC_GET_LINE_CODING == r)
     810:	21 32       	cpi	r18, 0x21	; 33
     812:	09 f0       	breq	.+2      	; 0x816 <_Z9CDC_SetupR8USBSetup+0x10>
     814:	4b c0       	rjmp	.+150    	; 0x8ac <_Z9CDC_SetupR8USBSetup+0xa6>
		{
			USB_SendControl(0,(void*)&_usbLineInfo,7);
     816:	47 e0       	ldi	r20, 0x07	; 7
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	6e e8       	ldi	r22, 0x8E	; 142
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_Z15USB_SendControlhPKvi>
     824:	5e c0       	rjmp	.+188    	; 0x8e2 <_Z9CDC_SetupR8USBSetup+0xdc>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
     826:	81 32       	cpi	r24, 0x21	; 33
     828:	09 f0       	breq	.+2      	; 0x82c <_Z9CDC_SetupR8USBSetup+0x26>
     82a:	40 c0       	rjmp	.+128    	; 0x8ac <_Z9CDC_SetupR8USBSetup+0xa6>
	{
		if (CDC_SEND_BREAK == r)
     82c:	23 32       	cpi	r18, 0x23	; 35
     82e:	89 f4       	brne	.+34     	; 0x852 <_Z9CDC_SetupR8USBSetup+0x4c>
		{
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     830:	83 81       	ldd	r24, Z+3	; 0x03
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	98 2f       	mov	r25, r24
     836:	88 27       	eor	r24, r24
     838:	32 81       	ldd	r19, Z+2	; 0x02
     83a:	83 2b       	or	r24, r19
     83c:	a0 e0       	ldi	r26, 0x00	; 0
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	80 93 8a 01 	sts	0x018A, r24
     844:	90 93 8b 01 	sts	0x018B, r25
     848:	a0 93 8c 01 	sts	0x018C, r26
     84c:	b0 93 8d 01 	sts	0x018D, r27
     850:	0f c0       	rjmp	.+30     	; 0x870 <_Z9CDC_SetupR8USBSetup+0x6a>
		}

		if (CDC_SET_LINE_CODING == r)
     852:	20 32       	cpi	r18, 0x20	; 32
     854:	39 f4       	brne	.+14     	; 0x864 <_Z9CDC_SetupR8USBSetup+0x5e>
		{
			USB_RecvControl((void*)&_usbLineInfo,7);
     856:	67 e0       	ldi	r22, 0x07	; 7
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	8e e8       	ldi	r24, 0x8E	; 142
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 8a 09 	call	0x1314	; 0x1314 <_Z15USB_RecvControlPvi>
     862:	09 c0       	rjmp	.+18     	; 0x876 <_Z9CDC_SetupR8USBSetup+0x70>
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
     864:	22 32       	cpi	r18, 0x22	; 34
     866:	21 f4       	brne	.+8      	; 0x870 <_Z9CDC_SetupR8USBSetup+0x6a>
		{
			_usbLineInfo.lineState = setup.wValueL;
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	80 93 95 01 	sts	0x0195, r24
     86e:	03 c0       	rjmp	.+6      	; 0x876 <_Z9CDC_SetupR8USBSetup+0x70>
		}

		if (CDC_SET_LINE_CODING == r || CDC_SET_CONTROL_LINE_STATE == r)
     870:	2d 7f       	andi	r18, 0xFD	; 253
     872:	20 32       	cpi	r18, 0x20	; 32
     874:	b1 f5       	brne	.+108    	; 0x8e2 <_Z9CDC_SetupR8USBSetup+0xdc>
// This is used to keep compatible with the old leonardo bootloaders.
// You are still able to set the magic key position manually to RAMEND-1 to save a few bytes for this check.
#if MAGIC_KEY_POS != (RAMEND-1)
			// For future boards save the key in the inproblematic RAMEND
			// Which is reserved for the main() return value (which will never return)
			if (_updatedLUFAbootloader) {
     876:	80 91 55 02 	lds	r24, 0x0255
     87a:	81 11       	cpse	r24, r1
     87c:	03 c0       	rjmp	.+6      	; 0x884 <_Z9CDC_SetupR8USBSetup+0x7e>
			// auto-reset into the bootloader is triggered when the port, already 
			// open at 1200 bps, is closed.  this is the signal to start the watchdog
			// with a relatively long period so it can finish housekeeping tasks
			// like servicing endpoints before the sketch ends

			uint16_t magic_key_pos = MAGIC_KEY_POS;
     87e:	e0 e0       	ldi	r30, 0x00	; 0
     880:	f8 e0       	ldi	r31, 0x08	; 8
     882:	02 c0       	rjmp	.+4      	; 0x888 <_Z9CDC_SetupR8USBSetup+0x82>
#if MAGIC_KEY_POS != (RAMEND-1)
			// For future boards save the key in the inproblematic RAMEND
			// Which is reserved for the main() return value (which will never return)
			if (_updatedLUFAbootloader) {
				// horray, we got a new bootloader!
				magic_key_pos = (RAMEND-1);
     884:	ee ef       	ldi	r30, 0xFE	; 254
     886:	fa e0       	ldi	r31, 0x0A	; 10
			}
#endif

			// We check DTR state to determine if host port is open (bit 0 of lineState).
			if (1200 == _usbLineInfo.dwDTERate && (_usbLineInfo.lineState & 0x01) == 0)
     888:	80 91 8e 01 	lds	r24, 0x018E
     88c:	90 91 8f 01 	lds	r25, 0x018F
     890:	a0 91 90 01 	lds	r26, 0x0190
     894:	b0 91 91 01 	lds	r27, 0x0191
     898:	80 3b       	cpi	r24, 0xB0	; 176
     89a:	94 40       	sbci	r25, 0x04	; 4
     89c:	a1 05       	cpc	r26, r1
     89e:	b1 05       	cpc	r27, r1
     8a0:	11 f5       	brne	.+68     	; 0x8e6 <_Z9CDC_SetupR8USBSetup+0xe0>
     8a2:	80 91 95 01 	lds	r24, 0x0195
     8a6:	80 ff       	sbrs	r24, 0
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <_Z9CDC_SetupR8USBSetup+0xaa>
     8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <_Z9CDC_SetupR8USBSetup+0xe0>
				}
			}
		}
		return true;
	}
	return false;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret
			if (1200 == _usbLineInfo.dwDTERate && (_usbLineInfo.lineState & 0x01) == 0)
			{
#if MAGIC_KEY_POS != (RAMEND-1)
				// Backup ram value if its not a newer bootloader.
				// This should avoid memory corruption at least a bit, not fully
				if (magic_key_pos != (RAMEND-1)) {
     8b0:	ee 3f       	cpi	r30, 0xFE	; 254
     8b2:	2a e0       	ldi	r18, 0x0A	; 10
     8b4:	f2 07       	cpc	r31, r18
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <_Z9CDC_SetupR8USBSetup+0xbe>
					*(uint16_t *)(RAMEND-1) = *(uint16_t *)magic_key_pos;
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	90 93 ff 0a 	sts	0x0AFF, r25
     8c0:	80 93 fe 0a 	sts	0x0AFE, r24
				}
#endif
				// Store boot key
				*(uint16_t *)magic_key_pos = MAGIC_KEY;
     8c4:	87 e7       	ldi	r24, 0x77	; 119
     8c6:	97 e7       	ldi	r25, 0x77	; 119
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	80 83       	st	Z, r24
				wdt_enable(WDTO_120MS);
     8cc:	2b e0       	ldi	r18, 0x0B	; 11
     8ce:	88 e1       	ldi	r24, 0x18	; 24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	a8 95       	wdr
     8d8:	80 93 60 00 	sts	0x0060, r24
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	20 93 60 00 	sts	0x0060, r18
				// Clean up RAMEND key
					*(uint16_t *)magic_key_pos = 0x0000;
				}
			}
		}
		return true;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	08 95       	ret
				// Most OSs do some intermediate steps when configuring ports and DTR can
				// twiggle more than once before stabilizing.
				// To avoid spurious resets we set the watchdog to 250ms and eventually
				// cancel if DTR goes back high.

				wdt_disable();
     8e6:	88 e1       	ldi	r24, 0x18	; 24
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	80 93 60 00 	sts	0x0060, r24
     8f0:	10 92 60 00 	sts	0x0060, r1
     8f4:	0f be       	out	0x3f, r0	; 63
				wdt_reset();
     8f6:	a8 95       	wdr
#if MAGIC_KEY_POS != (RAMEND-1)
				// Restore backed up (old bootloader) magic key data
				if (magic_key_pos != (RAMEND-1)) {
     8f8:	ee 3f       	cpi	r30, 0xFE	; 254
     8fa:	8a e0       	ldi	r24, 0x0A	; 10
     8fc:	f8 07       	cpc	r31, r24
     8fe:	39 f0       	breq	.+14     	; 0x90e <_Z9CDC_SetupR8USBSetup+0x108>
					*(uint16_t *)magic_key_pos = *(uint16_t *)(RAMEND-1);
     900:	80 91 fe 0a 	lds	r24, 0x0AFE
     904:	90 91 ff 0a 	lds	r25, 0x0AFF
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	80 83       	st	Z, r24
     90c:	ea cf       	rjmp	.-44     	; 0x8e2 <_Z9CDC_SetupR8USBSetup+0xdc>
				} else
#endif
				{
				// Clean up RAMEND key
					*(uint16_t *)magic_key_pos = 0x0000;
     90e:	10 92 ff 0a 	sts	0x0AFF, r1
     912:	10 92 fe 0a 	sts	0x0AFE, r1
     916:	e5 cf       	rjmp	.-54     	; 0x8e2 <_Z9CDC_SetupR8USBSetup+0xdc>

00000918 <_ZN7Serial_5beginEm>:
}


void Serial_::begin(unsigned long /* baud_count */)
{
	peek_buffer = -1;
     918:	2f ef       	ldi	r18, 0xFF	; 255
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	fc 01       	movw	r30, r24
     91e:	35 87       	std	Z+13, r19	; 0x0d
     920:	24 87       	std	Z+12, r18	; 0x0c
     922:	08 95       	ret

00000924 <_ZN7Serial_cvbEv>:
// to just being connected to the host).  It can be used, for example, in 
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool() {
     924:	cf 93       	push	r28
	bool result = false;
	if (_usbLineInfo.lineState > 0) 
     926:	c0 91 95 01 	lds	r28, 0x0195
		result = true;
	delay(10);
     92a:	6a e0       	ldi	r22, 0x0A	; 10
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <delay>
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool() {
	bool result = false;
	if (_usbLineInfo.lineState > 0) 
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	c1 11       	cpse	r28, r1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <_ZN7Serial_cvbEv+0x1a>
     93c:	80 e0       	ldi	r24, 0x00	; 0
		result = true;
	delay(10);
	return result;
}
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <_GLOBAL__sub_I__updatedLUFAbootloader>:
  public:
    Print() : write_error(0) {}
     942:	10 92 08 02 	sts	0x0208, r1
     946:	10 92 07 02 	sts	0x0207, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     94a:	88 ee       	ldi	r24, 0xE8	; 232
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	80 93 09 02 	sts	0x0209, r24
     956:	90 93 0a 02 	sts	0x020A, r25
     95a:	a0 93 0b 02 	sts	0x020B, r26
     95e:	b0 93 0c 02 	sts	0x020C, r27
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
     962:	8b ed       	ldi	r24, 0xDB	; 219
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	90 93 06 02 	sts	0x0206, r25
     96a:	80 93 05 02 	sts	0x0205, r24
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	9f ef       	ldi	r25, 0xFF	; 255
     972:	90 93 12 02 	sts	0x0212, r25
     976:	80 93 11 02 	sts	0x0211, r24
     97a:	08 95       	ret

0000097c <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     97c:	61 15       	cp	r22, r1
     97e:	71 05       	cpc	r23, r1
     980:	81 f0       	breq	.+32     	; 0x9a2 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     982:	db 01       	movw	r26, r22
     984:	0d 90       	ld	r0, X+
     986:	00 20       	and	r0, r0
     988:	e9 f7       	brne	.-6      	; 0x984 <_ZN5Print5writeEPKc+0x8>
     98a:	ad 01       	movw	r20, r26
     98c:	41 50       	subi	r20, 0x01	; 1
     98e:	51 09       	sbc	r21, r1
     990:	46 1b       	sub	r20, r22
     992:	57 0b       	sbc	r21, r23
     994:	dc 01       	movw	r26, r24
     996:	ed 91       	ld	r30, X+
     998:	fc 91       	ld	r31, X
     99a:	02 80       	ldd	r0, Z+2	; 0x02
     99c:	f3 81       	ldd	r31, Z+3	; 0x03
     99e:	e0 2d       	mov	r30, r0
     9a0:	09 94       	ijmp
    }
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     9a8:	0c 94 be 04 	jmp	0x97c	; 0x97c <_ZN5Print5writeEPKc>

000009ac <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
     9ac:	dc 01       	movw	r26, r24
     9ae:	ed 91       	ld	r30, X+
     9b0:	fc 91       	ld	r31, X
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	09 94       	ijmp

000009ba <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
     9ba:	67 ee       	ldi	r22, 0xE7	; 231
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	0c 94 be 04 	jmp	0x97c	; 0x97c <_ZN5Print5writeEPKc>

000009c2 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     9cc:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5Print5writeEPKc>
     9d0:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     9d2:	ce 01       	movw	r24, r28
     9d4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN5Print7printlnEv>
  return n;
}
     9d8:	80 0f       	add	r24, r16
     9da:	91 1f       	adc	r25, r17
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	a1 97       	sbiw	r28, 0x21	; 33
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	7c 01       	movw	r14, r24
     a0e:	f4 2f       	mov	r31, r20
     a10:	d5 2e       	mov	r13, r21
     a12:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     a14:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     a16:	22 30       	cpi	r18, 0x02	; 2
     a18:	08 f4       	brcc	.+2      	; 0xa1c <_ZN5Print11printNumberEmh+0x36>
     a1a:	2a e0       	ldi	r18, 0x0A	; 10
     a1c:	8e 01       	movw	r16, r28
     a1e:	0f 5d       	subi	r16, 0xDF	; 223
     a20:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     a22:	82 2e       	mov	r8, r18
     a24:	91 2c       	mov	r9, r1
     a26:	a1 2c       	mov	r10, r1
     a28:	b1 2c       	mov	r11, r1
     a2a:	6f 2f       	mov	r22, r31
     a2c:	7d 2d       	mov	r23, r13
     a2e:	a5 01       	movw	r20, r10
     a30:	94 01       	movw	r18, r8
     a32:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__udivmodsi4>
    n /= base;
     a36:	f2 2f       	mov	r31, r18
     a38:	d3 2e       	mov	r13, r19
     a3a:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     a3c:	01 50       	subi	r16, 0x01	; 1
     a3e:	11 09       	sbc	r17, r1
     a40:	6a 30       	cpi	r22, 0x0A	; 10
     a42:	14 f4       	brge	.+4      	; 0xa48 <_ZN5Print11printNumberEmh+0x62>
     a44:	e0 e3       	ldi	r30, 0x30	; 48
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <_ZN5Print11printNumberEmh+0x64>
     a48:	e7 e3       	ldi	r30, 0x37	; 55
     a4a:	e6 0f       	add	r30, r22
     a4c:	d8 01       	movw	r26, r16
     a4e:	ec 93       	st	X, r30
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     a50:	23 2b       	or	r18, r19
     a52:	24 2b       	or	r18, r20
     a54:	25 2b       	or	r18, r21
     a56:	49 f7       	brne	.-46     	; 0xa2a <_ZN5Print11printNumberEmh+0x44>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     a58:	b8 01       	movw	r22, r16
     a5a:	c7 01       	movw	r24, r14
     a5c:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5Print5writeEPKc>
}
     a60:	a1 96       	adiw	r28, 0x21	; 33
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	8f 90       	pop	r8
     a82:	08 95       	ret

00000a84 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
     a96:	6a 01       	movw	r12, r20
     a98:	7b 01       	movw	r14, r22
  if (base == 0) {
     a9a:	21 15       	cp	r18, r1
     a9c:	31 05       	cpc	r19, r1
     a9e:	79 f4       	brne	.+30     	; 0xabe <_ZN5Print5printEli+0x3a>
    return write(n);
     aa0:	e8 81       	ld	r30, Y
     aa2:	f9 81       	ldd	r31, Y+1	; 0x01
     aa4:	01 90       	ld	r0, Z+
     aa6:	f0 81       	ld	r31, Z
     aa8:	e0 2d       	mov	r30, r0
     aaa:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     abc:	09 94       	ijmp
  } else if (base == 10) {
     abe:	2a 30       	cpi	r18, 0x0A	; 10
     ac0:	31 05       	cpc	r19, r1
     ac2:	e9 f4       	brne	.+58     	; 0xafe <_ZN5Print5printEli+0x7a>
    if (n < 0) {
     ac4:	77 ff       	sbrs	r23, 7
     ac6:	1a c0       	rjmp	.+52     	; 0xafc <_ZN5Print5printEli+0x78>
      int t = print('-');
     ac8:	6d e2       	ldi	r22, 0x2D	; 45
     aca:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN5Print5printEc>
     ace:	8c 01       	movw	r16, r24
      n = -n;
     ad0:	44 27       	eor	r20, r20
     ad2:	55 27       	eor	r21, r21
     ad4:	ba 01       	movw	r22, r20
     ad6:	4c 19       	sub	r20, r12
     ad8:	5d 09       	sbc	r21, r13
     ada:	6e 09       	sbc	r22, r14
     adc:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     ade:	2a e0       	ldi	r18, 0x0A	; 10
     ae0:	ce 01       	movw	r24, r28
     ae2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN5Print11printNumberEmh>
     ae6:	80 0f       	add	r24, r16
     ae8:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     afc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     afe:	b7 01       	movw	r22, r14
     b00:	a6 01       	movw	r20, r12
     b02:	ce 01       	movw	r24, r28
  }
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     b14:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN5Print11printNumberEmh>

00000b18 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     b18:	9a 01       	movw	r18, r20
  return print((long) n, base);
     b1a:	ab 01       	movw	r20, r22
     b1c:	66 27       	eor	r22, r22
     b1e:	57 fd       	sbrc	r21, 7
     b20:	60 95       	com	r22
     b22:	76 2f       	mov	r23, r22
     b24:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_ZN5Print5printEli>

00000b28 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     b28:	21 15       	cp	r18, r1
     b2a:	31 05       	cpc	r19, r1
     b2c:	41 f4       	brne	.+16     	; 0xb3e <_ZN5Print5printEmi+0x16>
     b2e:	dc 01       	movw	r26, r24
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	01 90       	ld	r0, Z+
     b36:	f0 81       	ld	r31, Z
     b38:	e0 2d       	mov	r30, r0
     b3a:	64 2f       	mov	r22, r20
     b3c:	09 94       	ijmp
  else return printNumber(n, base);
     b3e:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN5Print11printNumberEmh>

00000b42 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     b42:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     b44:	46 2f       	mov	r20, r22
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0c 94 94 05 	jmp	0xb28	; 0xb28 <_ZN5Print5printEmi>

00000b50 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     b50:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     b52:	ab 01       	movw	r20, r22
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	0c 94 94 05 	jmp	0xb28	; 0xb28 <_ZN5Print5printEmi>

00000b5c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     b5c:	4f 92       	push	r4
     b5e:	5f 92       	push	r5
     b60:	6f 92       	push	r6
     b62:	7f 92       	push	r7
     b64:	8f 92       	push	r8
     b66:	9f 92       	push	r9
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	6a 01       	movw	r12, r20
     b80:	7b 01       	movw	r14, r22
     b82:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     b84:	9a 01       	movw	r18, r20
     b86:	ab 01       	movw	r20, r22
     b88:	c7 01       	movw	r24, r14
     b8a:	b6 01       	movw	r22, r12
     b8c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__unordsf2>
     b90:	88 23       	and	r24, r24
     b92:	19 f0       	breq	.+6      	; 0xb9a <_ZN5Print10printFloatEdh+0x3e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     b94:	6a ee       	ldi	r22, 0xEA	; 234
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	27 c0       	rjmp	.+78     	; 0xbe8 <_ZN5Print10printFloatEdh+0x8c>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     b9a:	26 01       	movw	r4, r12
     b9c:	37 01       	movw	r6, r14
     b9e:	e8 94       	clt
     ba0:	77 f8       	bld	r7, 7
     ba2:	2f ef       	ldi	r18, 0xFF	; 255
     ba4:	3f ef       	ldi	r19, 0xFF	; 255
     ba6:	4f e7       	ldi	r20, 0x7F	; 127
     ba8:	5f e7       	ldi	r21, 0x7F	; 127
     baa:	c3 01       	movw	r24, r6
     bac:	b2 01       	movw	r22, r4
     bae:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__unordsf2>
     bb2:	81 11       	cpse	r24, r1
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <_ZN5Print10printFloatEdh+0x74>
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	3f ef       	ldi	r19, 0xFF	; 255
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	5f e7       	ldi	r21, 0x7F	; 127
     bbe:	c3 01       	movw	r24, r6
     bc0:	b2 01       	movw	r22, r4
     bc2:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     bc6:	18 16       	cp	r1, r24
     bc8:	1c f4       	brge	.+6      	; 0xbd0 <_ZN5Print10printFloatEdh+0x74>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bca:	6e ee       	ldi	r22, 0xEE	; 238
     bcc:	71 e0       	ldi	r23, 0x01	; 1
     bce:	0c c0       	rjmp	.+24     	; 0xbe8 <_ZN5Print10printFloatEdh+0x8c>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     bd0:	2f ef       	ldi	r18, 0xFF	; 255
     bd2:	3f ef       	ldi	r19, 0xFF	; 255
     bd4:	4f e7       	ldi	r20, 0x7F	; 127
     bd6:	5f e4       	ldi	r21, 0x4F	; 79
     bd8:	c7 01       	movw	r24, r14
     bda:	b6 01       	movw	r22, r12
     bdc:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__gesf2>
     be0:	18 16       	cp	r1, r24
     be2:	ac f4       	brge	.+42     	; 0xc0e <_ZN5Print10printFloatEdh+0xb2>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     be4:	62 ef       	ldi	r22, 0xF2	; 242
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     c0a:	0c 94 be 04 	jmp	0x97c	; 0x97c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	5f ec       	ldi	r21, 0xCF	; 207
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     c1e:	87 fd       	sbrc	r24, 7
     c20:	e1 cf       	rjmp	.-62     	; 0xbe4 <_ZN5Print10printFloatEdh+0x88>
  
  // Handle negative numbers
  if (number < 0.0)
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a9 01       	movw	r20, r18
     c28:	c7 01       	movw	r24, r14
     c2a:	b6 01       	movw	r22, r12
     c2c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <__cmpsf2>
     c30:	87 ff       	sbrs	r24, 7
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <_ZN5Print10printFloatEdh+0xec>
  {
     n += print('-');
     c34:	6d e2       	ldi	r22, 0x2D	; 45
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 d6 04 	call	0x9ac	; 0x9ac <_ZN5Print5printEc>
     c3c:	8c 01       	movw	r16, r24
     number = -number;
     c3e:	f7 fa       	bst	r15, 7
     c40:	f0 94       	com	r15
     c42:	f7 f8       	bld	r15, 7
     c44:	f0 94       	com	r15
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <_ZN5Print10printFloatEdh+0xf0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     c4c:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     c56:	ab 14       	cp	r10, r11
     c58:	41 f0       	breq	.+16     	; 0xc6a <_ZN5Print10printFloatEdh+0x10e>
    rounding /= 10.0;
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e2       	ldi	r20, 0x20	; 32
     c60:	51 e4       	ldi	r21, 0x41	; 65
     c62:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     c66:	a3 94       	inc	r10
     c68:	f6 cf       	rjmp	.-20     	; 0xc56 <_ZN5Print10printFloatEdh+0xfa>
    rounding /= 10.0;
  
  number += rounding;
     c6a:	9b 01       	movw	r18, r22
     c6c:	ac 01       	movw	r20, r24
     c6e:	c7 01       	movw	r24, r14
     c70:	b6 01       	movw	r22, r12
     c72:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__addsf3>
     c76:	6b 01       	movw	r12, r22
     c78:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     c7a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fixunssfsi>
     c7e:	2b 01       	movw	r4, r22
     c80:	3c 01       	movw	r6, r24
  double remainder = number - (double)int_part;
     c82:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__floatunsisf>
     c86:	9b 01       	movw	r18, r22
     c88:	ac 01       	movw	r20, r24
     c8a:	c7 01       	movw	r24, r14
     c8c:	b6 01       	movw	r22, r12
     c8e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__subsf3>
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     c96:	2a e0       	ldi	r18, 0x0A	; 10
     c98:	b3 01       	movw	r22, r6
     c9a:	a2 01       	movw	r20, r4
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     ca2:	08 0f       	add	r16, r24
     ca4:	19 1f       	adc	r17, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     ca6:	bb 20       	and	r11, r11
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <_ZN5Print10printFloatEdh+0x15c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     caa:	66 ef       	ldi	r22, 0xF6	; 246
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
     cb4:	08 0f       	add	r16, r24
     cb6:	19 1f       	adc	r17, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     cb8:	7b 2c       	mov	r7, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     cba:	77 20       	and	r7, r7
     cbc:	41 f1       	breq	.+80     	; 0xd0e <_ZN5Print10printFloatEdh+0x1b2>
  {
    remainder *= 10.0;
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
     cca:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <__mulsf3>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
    int toPrint = int(remainder);
     cd2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     cd6:	4b 01       	movw	r8, r22
     cd8:	aa 24       	eor	r10, r10
     cda:	97 fc       	sbrc	r9, 7
     cdc:	a0 94       	com	r10
     cde:	ba 2c       	mov	r11, r10
     ce0:	2a e0       	ldi	r18, 0x0A	; 10
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	b5 01       	movw	r22, r10
     ce6:	a4 01       	movw	r20, r8
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 42 05 	call	0xa84	; 0xa84 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     cee:	08 0f       	add	r16, r24
     cf0:	19 1f       	adc	r17, r25
    remainder -= toPrint; 
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__floatsisf>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	c7 01       	movw	r24, r14
     d00:	b6 01       	movw	r22, r12
     d02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__subsf3>
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
     d0a:	7a 94       	dec	r7
     d0c:	d6 cf       	rjmp	.-84     	; 0xcba <_ZN5Print10printFloatEdh+0x15e>
  } 
  
  return n;
}
     d0e:	c8 01       	movw	r24, r16
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	bf 90       	pop	r11
     d22:	af 90       	pop	r10
     d24:	9f 90       	pop	r9
     d26:	8f 90       	pop	r8
     d28:	7f 90       	pop	r7
     d2a:	6f 90       	pop	r6
     d2c:	5f 90       	pop	r5
     d2e:	4f 90       	pop	r4
     d30:	08 95       	ret

00000d32 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     d32:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <_ZN5Print10printFloatEdh>

00000d36 <_ZN6Stream9timedPeekEv>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
     d40:	0e 94 29 0c 	call	0x1852	; 0x1852 <millis>
     d44:	68 87       	std	Y+8, r22	; 0x08
     d46:	79 87       	std	Y+9, r23	; 0x09
     d48:	8a 87       	std	Y+10, r24	; 0x0a
     d4a:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = peek();
     d4c:	e8 81       	ld	r30, Y
     d4e:	f9 81       	ldd	r31, Y+1	; 0x01
     d50:	00 84       	ldd	r0, Z+8	; 0x08
     d52:	f1 85       	ldd	r31, Z+9	; 0x09
     d54:	e0 2d       	mov	r30, r0
     d56:	ce 01       	movw	r24, r28
     d58:	09 95       	icall
    if (c >= 0) return c;
     d5a:	97 ff       	sbrs	r25, 7
     d5c:	15 c0       	rjmp	.+42     	; 0xd88 <_ZN6Stream9timedPeekEv+0x52>
  } while(millis() - _startMillis < _timeout);
     d5e:	0e 94 29 0c 	call	0x1852	; 0x1852 <millis>
     d62:	08 85       	ldd	r16, Y+8	; 0x08
     d64:	19 85       	ldd	r17, Y+9	; 0x09
     d66:	2a 85       	ldd	r18, Y+10	; 0x0a
     d68:	3b 85       	ldd	r19, Y+11	; 0x0b
     d6a:	60 1b       	sub	r22, r16
     d6c:	71 0b       	sbc	r23, r17
     d6e:	82 0b       	sbc	r24, r18
     d70:	93 0b       	sbc	r25, r19
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
     d72:	0c 81       	ldd	r16, Y+4	; 0x04
     d74:	1d 81       	ldd	r17, Y+5	; 0x05
     d76:	2e 81       	ldd	r18, Y+6	; 0x06
     d78:	3f 81       	ldd	r19, Y+7	; 0x07
     d7a:	60 17       	cp	r22, r16
     d7c:	71 07       	cpc	r23, r17
     d7e:	82 07       	cpc	r24, r18
     d80:	93 07       	cpc	r25, r19
     d82:	20 f3       	brcs	.-56     	; 0xd4c <_ZN6Stream9timedPeekEv+0x16>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	9f ef       	ldi	r25, 0xFF	; 255
}
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <_ZN6Stream13peekNextDigitE13LookaheadModeb>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)
{
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
     d9e:	8b 01       	movw	r16, r22
     da0:	f4 2e       	mov	r15, r20
  int c;
  while (1) {
    c = timedPeek();
     da2:	ce 01       	movw	r24, r28
     da4:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN6Stream9timedPeekEv>
     da8:	9c 01       	movw	r18, r24

    if( c < 0 ||
     daa:	97 fd       	sbrc	r25, 7
     dac:	28 c0       	rjmp	.+80     	; 0xdfe <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6c>
     dae:	8d 32       	cpi	r24, 0x2D	; 45
     db0:	91 05       	cpc	r25, r1
     db2:	19 f1       	breq	.+70     	; 0xdfa <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x68>
        c == '-' ||
        (c >= '0' && c <= '9') ||
     db4:	c0 97       	sbiw	r24, 0x30	; 48
  int c;
  while (1) {
    c = timedPeek();

    if( c < 0 ||
        c == '-' ||
     db6:	0a 97       	sbiw	r24, 0x0a	; 10
     db8:	10 f1       	brcs	.+68     	; 0xdfe <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6c>
        (c >= '0' && c <= '9') ||
     dba:	ff 20       	and	r15, r15
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x32>
        (detectDecimal && c == '.')) return c;
     dbe:	2e 32       	cpi	r18, 0x2E	; 46
     dc0:	31 05       	cpc	r19, r1
     dc2:	f9 f0       	breq	.+62     	; 0xe02 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x70>

    switch( lookahead ){
     dc4:	01 30       	cpi	r16, 0x01	; 1
     dc6:	11 05       	cpc	r17, r1
     dc8:	f9 f0       	breq	.+62     	; 0xe08 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x76>
     dca:	02 30       	cpi	r16, 0x02	; 2
     dcc:	11 05       	cpc	r17, r1
     dce:	69 f4       	brne	.+26     	; 0xdea <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
        case SKIP_NONE: return -1; // Fail code.
        case SKIP_WHITESPACE:
            switch( c ){
     dd0:	2d 30       	cpi	r18, 0x0D	; 13
     dd2:	31 05       	cpc	r19, r1
     dd4:	51 f0       	breq	.+20     	; 0xdea <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
     dd6:	34 f4       	brge	.+12     	; 0xde4 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x52>
     dd8:	29 50       	subi	r18, 0x09	; 9
     dda:	31 09       	sbc	r19, r1
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	20 f0       	brcs	.+8      	; 0xdea <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x58>
     de2:	12 c0       	rjmp	.+36     	; 0xe08 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x76>
     de4:	20 32       	cpi	r18, 0x20	; 32
     de6:	31 05       	cpc	r19, r1
     de8:	79 f4       	brne	.+30     	; 0xe08 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x76>
                default: return -1; // Fail code.
            }
        case SKIP_ALL:
            break;
    }
    read();  // discard non-numeric
     dea:	e8 81       	ld	r30, Y
     dec:	f9 81       	ldd	r31, Y+1	; 0x01
     dee:	06 80       	ldd	r0, Z+6	; 0x06
     df0:	f7 81       	ldd	r31, Z+7	; 0x07
     df2:	e0 2d       	mov	r30, r0
     df4:	ce 01       	movw	r24, r28
     df6:	09 95       	icall
  }
     df8:	d4 cf       	rjmp	.-88     	; 0xda2 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x10>
     dfa:	8d e2       	ldi	r24, 0x2D	; 45
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x72>
// discards non-numeric characters
int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)
{
  int c;
  while (1) {
    c = timedPeek();
     dfe:	c9 01       	movw	r24, r18
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x7a>
     e02:	8e e2       	ldi	r24, 0x2E	; 46
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x7a>
            switch( c ){
                case ' ':
                case '\t':
                case '\r':
                case '\n': break;
                default: return -1; // Fail code.
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	9f ef       	ldi	r25, 0xFF	; 255
        case SKIP_ALL:
            break;
    }
    read();  // discard non-numeric
  }
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	08 95       	ret

00000e18 <_ZN6Stream8parseIntE13LookaheadModec>:
// lookahead determines how parseInt looks ahead in the stream.
// See LookaheadMode enumeration at the top of the file.
// Lookahead is terminated by the first character that is not a valid part of an integer.
// Once parsing commences, 'ignore' will be skipped in the stream.
long Stream::parseInt(LookaheadMode lookahead, char ignore)
{
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	00 d0       	rcall	.+0      	; 0xe28 <_ZN6Stream8parseIntE13LookaheadModec+0x10>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <_ZN6Stream8parseIntE13LookaheadModec+0x12>
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	6c 01       	movw	r12, r24
     e30:	04 2f       	mov	r16, r20
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit(lookahead, false);
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
     e38:	fc 01       	movw	r30, r24
  // ignore non numeric leading characters
  if(c < 0)
     e3a:	97 fd       	sbrc	r25, 7
     e3c:	4b c0       	rjmp	.+150    	; 0xed4 <_ZN6Stream8parseIntE13LookaheadModec+0xbc>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	a9 01       	movw	r20, r18
     e44:	f1 2c       	mov	r15, r1
    return 0; // zero returned if timeout

  do{
    if(c == ignore)
     e46:	11 27       	eor	r17, r17
     e48:	07 fd       	sbrc	r16, 7
     e4a:	10 95       	com	r17
     e4c:	e0 17       	cp	r30, r16
     e4e:	f1 07       	cpc	r31, r17
     e50:	e9 f0       	breq	.+58     	; 0xe8c <_ZN6Stream8parseIntE13LookaheadModec+0x74>
      ; // ignore this character
    else if(c == '-')
     e52:	ed 32       	cpi	r30, 0x2D	; 45
     e54:	f1 05       	cpc	r31, r1
     e56:	c1 f0       	breq	.+48     	; 0xe88 <_ZN6Stream8parseIntE13LookaheadModec+0x70>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
     e58:	cf 01       	movw	r24, r30
     e5a:	c0 97       	sbiw	r24, 0x30	; 48
     e5c:	0a 97       	sbiw	r24, 0x0a	; 10
     e5e:	b0 f4       	brcc	.+44     	; 0xe8c <_ZN6Stream8parseIntE13LookaheadModec+0x74>
      value = value * 10 + c - '0';
     e60:	aa e0       	ldi	r26, 0x0A	; 10
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__muluhisi3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	cf 01       	movw	r24, r30
     e6e:	aa 27       	eor	r26, r26
     e70:	97 fd       	sbrc	r25, 7
     e72:	a0 95       	com	r26
     e74:	ba 2f       	mov	r27, r26
     e76:	28 0f       	add	r18, r24
     e78:	39 1f       	adc	r19, r25
     e7a:	4a 1f       	adc	r20, r26
     e7c:	5b 1f       	adc	r21, r27
     e7e:	20 53       	subi	r18, 0x30	; 48
     e80:	31 09       	sbc	r19, r1
     e82:	41 09       	sbc	r20, r1
     e84:	51 09       	sbc	r21, r1
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <_ZN6Stream8parseIntE13LookaheadModec+0x74>

  do{
    if(c == ignore)
      ; // ignore this character
    else if(c == '-')
      isNegative = true;
     e88:	ff 24       	eor	r15, r15
     e8a:	f3 94       	inc	r15
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
     e8c:	d6 01       	movw	r26, r12
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	06 80       	ldd	r0, Z+6	; 0x06
     e94:	f7 81       	ldd	r31, Z+7	; 0x07
     e96:	e0 2d       	mov	r30, r0
     e98:	c6 01       	movw	r24, r12
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	09 95       	icall
    c = timedPeek();
     ea4:	c6 01       	movw	r24, r12
     ea6:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN6Stream9timedPeekEv>
     eaa:	fc 01       	movw	r30, r24
  }
  while( (c >= '0' && c <= '9') || c == ignore );
     eac:	c0 97       	sbiw	r24, 0x30	; 48
  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
     eae:	29 81       	ldd	r18, Y+1	; 0x01
     eb0:	3a 81       	ldd	r19, Y+2	; 0x02
     eb2:	4b 81       	ldd	r20, Y+3	; 0x03
     eb4:	5c 81       	ldd	r21, Y+4	; 0x04
     eb6:	0a 97       	sbiw	r24, 0x0a	; 10
     eb8:	48 f2       	brcs	.-110    	; 0xe4c <_ZN6Stream8parseIntE13LookaheadModec+0x34>
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == ignore );
     eba:	e0 17       	cp	r30, r16
     ebc:	f1 07       	cpc	r31, r17
     ebe:	31 f2       	breq	.-116    	; 0xe4c <_ZN6Stream8parseIntE13LookaheadModec+0x34>

  if(isNegative)
     ec0:	ff 20       	and	r15, r15
     ec2:	61 f0       	breq	.+24     	; 0xedc <_ZN6Stream8parseIntE13LookaheadModec+0xc4>
    value = -value;
     ec4:	66 27       	eor	r22, r22
     ec6:	77 27       	eor	r23, r23
     ec8:	cb 01       	movw	r24, r22
     eca:	62 1b       	sub	r22, r18
     ecc:	73 0b       	sbc	r23, r19
     ece:	84 0b       	sbc	r24, r20
     ed0:	95 0b       	sbc	r25, r21
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <_ZN6Stream8parseIntE13LookaheadModec+0xc8>
  int c;

  c = peekNextDigit(lookahead, false);
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	cb 01       	movw	r24, r22
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <_ZN6Stream8parseIntE13LookaheadModec+0xc8>
     edc:	ca 01       	movw	r24, r20
     ede:	b9 01       	movw	r22, r18
  while( (c >= '0' && c <= '9') || c == ignore );

  if(isNegative)
    value = -value;
  return value;
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	08 95       	ret

00000ef8 <_ZL4RecvPVhh>:
	UEINTX = ~(1<<RXOUTI);
}

static inline void Recv(volatile u8* data, u8 count)
{
	while (count--)
     ef8:	61 50       	subi	r22, 0x01	; 1
     efa:	30 f0       	brcs	.+12     	; 0xf08 <_ZL4RecvPVhh+0x10>
		*data++ = UEDATX;
     efc:	20 91 f1 00 	lds	r18, 0x00F1
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	f8 cf       	rjmp	.-16     	; 0xef8 <_ZL4RecvPVhh>
	
	RXLED1;					// light the RX LED
     f08:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	80 93 5f 02 	sts	0x025F, r24
     f10:	08 95       	ret

00000f12 <_ZL11SendControlh>:
}

static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
     f12:	40 91 5a 02 	lds	r20, 0x025A
     f16:	50 91 5b 02 	lds	r21, 0x025B
     f1a:	20 91 58 02 	lds	r18, 0x0258
     f1e:	30 91 59 02 	lds	r19, 0x0259
     f22:	42 17       	cp	r20, r18
     f24:	53 07       	cpc	r21, r19
     f26:	b4 f4       	brge	.+44     	; 0xf54 <_ZL11SendControlh+0x42>
		;
}

static inline u8 WaitForINOrOUT()
{
	while (!(UEINTX & ((1<<TXINI)|(1<<RXOUTI))))
     f28:	90 91 e8 00 	lds	r25, 0x00E8
     f2c:	95 70       	andi	r25, 0x05	; 5
     f2e:	e1 f3       	breq	.-8      	; 0xf28 <_ZL11SendControlh+0x16>
		;
	return (UEINTX & (1<<RXOUTI)) == 0;
     f30:	90 91 e8 00 	lds	r25, 0x00E8
static
bool SendControl(u8 d)
{
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
     f34:	92 fd       	sbrc	r25, 2
     f36:	19 c0       	rjmp	.+50     	; 0xf6a <_ZL11SendControlh+0x58>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
     f38:	80 93 f1 00 	sts	0x00F1, r24
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
     f3c:	80 91 5a 02 	lds	r24, 0x025A
     f40:	90 91 5b 02 	lds	r25, 0x025B
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	8f 73       	andi	r24, 0x3F	; 63
     f48:	99 27       	eor	r25, r25
     f4a:	89 2b       	or	r24, r25
     f4c:	19 f4       	brne	.+6      	; 0xf54 <_ZL11SendControlh+0x42>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
     f4e:	8e ef       	ldi	r24, 0xFE	; 254
     f50:	80 93 e8 00 	sts	0x00E8, r24
			return false;
		Send8(d);
		if (!((_cmark + 1) & 0x3F))
			ClearIN();	// Fifo is full, release this packet
	}
	_cmark++;
     f54:	80 91 5a 02 	lds	r24, 0x025A
     f58:	90 91 5b 02 	lds	r25, 0x025B
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	90 93 5b 02 	sts	0x025B, r25
     f62:	80 93 5a 02 	sts	0x025A, r24
	return true;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 95       	ret
bool SendControl(u8 d)
{
	if (_cmark < _cend)
	{
		if (!WaitForINOrOUT())
			return false;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
		if (!((_cmark + 1) & 0x3F))
			ClearIN();	// Fifo is full, release this packet
	}
	_cmark++;
	return true;
};
     f6c:	08 95       	ret

00000f6e <_ZL24USB_SendStringDescriptorPKhhh>:
}

// Send a USB descriptor string. The string is stored in PROGMEM as a
// plain ASCII string but is sent out as UTF-16 with the correct 2-byte
// prefix
static bool USB_SendStringDescriptor(const u8*string_P, u8 string_len, uint8_t flags) {
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	1f 92       	push	r1
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	08 2f       	mov	r16, r24
     f86:	16 2f       	mov	r17, r22
     f88:	f4 2e       	mov	r15, r20
        SendControl(2 + string_len * 2);
     f8a:	86 2f       	mov	r24, r22
     f8c:	88 0f       	add	r24, r24
     f8e:	8e 5f       	subi	r24, 0xFE	; 254
     f90:	99 83       	std	Y+1, r25	; 0x01
     f92:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZL11SendControlh>
        SendControl(3);
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZL11SendControlh>
     f9c:	e0 2e       	mov	r14, r16
        bool pgm = flags & TRANSFER_PGM;
        for(u8 i = 0; i < string_len; i++) {
     f9e:	c0 2e       	mov	r12, r16
     fa0:	99 81       	ldd	r25, Y+1	; 0x01
     fa2:	d9 2e       	mov	r13, r25
     fa4:	8c 2d       	mov	r24, r12
     fa6:	8e 19       	sub	r24, r14
     fa8:	81 17       	cp	r24, r17
     faa:	98 f4       	brcc	.+38     	; 0xfd2 <_ZL24USB_SendStringDescriptorPKhhh+0x64>
                bool r = SendControl(pgm ? pgm_read_byte(&string_P[i]) : string_P[i]);
     fac:	f6 01       	movw	r30, r12
     fae:	f7 fe       	sbrs	r15, 7
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <_ZL24USB_SendStringDescriptorPKhhh+0x48>
     fb2:	84 91       	lpm	r24, Z
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <_ZL24USB_SendStringDescriptorPKhhh+0x4a>
     fb6:	80 81       	ld	r24, Z
     fb8:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZL11SendControlh>
     fbc:	08 2f       	mov	r16, r24
                r &= SendControl(0); // high byte
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZL11SendControlh>
     fc4:	80 23       	and	r24, r16
     fc6:	ff ef       	ldi	r31, 0xFF	; 255
     fc8:	cf 1a       	sub	r12, r31
     fca:	df 0a       	sbc	r13, r31
                if(!r) {
     fcc:	81 11       	cpse	r24, r1
     fce:	ea cf       	rjmp	.-44     	; 0xfa4 <_ZL24USB_SendStringDescriptorPKhhh+0x36>
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <_ZL24USB_SendStringDescriptorPKhhh+0x66>
                        return false;
                }
        }
        return true;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
}
     fd4:	0f 90       	pop	r0
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	08 95       	ret

00000fe8 <_ZL15USB_ClockEnablev>:
}

static inline void USB_ClockEnable()
{
#if defined(UHWCON)
	UHWCON |= (1<<UVREGE);			// power internal reg
     fe8:	80 91 d7 00 	lds	r24, 0x00D7
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	80 93 d7 00 	sts	0x00D7, r24
#endif
	USBCON = (1<<USBE) | (1<<FRZCLK);	// clock frozen, usb enabled
     ff2:	80 ea       	ldi	r24, 0xA0	; 160
     ff4:	80 93 d8 00 	sts	0x00D8, r24

// ATmega32U4
#if defined(PINDIV)
#if F_CPU == 16000000UL
	PLLCSR |= (1<<PINDIV);                   // Need 16 MHz xtal
     ff8:	89 b5       	in	r24, 0x29	; 41
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	89 bd       	out	0x29, r24	; 41
#endif
#else
#error "USB Chip not supported, please defined method of USB PLL initialization"
#endif

	PLLCSR |= (1<<PLLE);
     ffe:	89 b5       	in	r24, 0x29	; 41
    1000:	82 60       	ori	r24, 0x02	; 2
    1002:	89 bd       	out	0x29, r24	; 41
	while (!(PLLCSR & (1<<PLOCK)))		// wait for lock pll
    1004:	09 b4       	in	r0, 0x29	; 41
    1006:	00 fe       	sbrs	r0, 0
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <_ZL15USB_ClockEnablev+0x1c>
	}

	// Some tests on specific versions of macosx (10.7.3), reported some
	// strange behaviors when the board is reset using the serial
	// port touch at 1200 bps. This delay fixes this behavior.
	delay(1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <delay>
#if defined(OTGPADE)
	USBCON = (USBCON & ~(1<<FRZCLK)) | (1<<OTGPADE);	// start USB clock, enable VBUS Pad
    1016:	80 91 d8 00 	lds	r24, 0x00D8
    101a:	8f 7c       	andi	r24, 0xCF	; 207
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	80 93 d8 00 	sts	0x00D8, r24
	USBCON &= ~(1 << FRZCLK);	// start USB clock
#endif

#if defined(RSTCPU)
#if defined(LSM)
	UDCON &= ~((1<<RSTCPU) | (1<<LSM) | (1<<RMWKUP) | (1<<DETACH));	// enable attach resistor, set full speed mode
    1022:	80 91 e0 00 	lds	r24, 0x00E0
    1026:	80 7f       	andi	r24, 0xF0	; 240
    1028:	80 93 e0 00 	sts	0x00E0, r24
    102c:	08 95       	ret

0000102e <_ZL14SendInterfacesv>:
	}
	return len;
}

static u8 SendInterfaces()
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	u8 interfaces = 0;
    1038:	19 82       	std	Y+1, r1	; 0x01

	CDC_GetInterface(&interfaces);
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z16CDC_GetInterfacePh>

#ifdef PLUGGABLE_USB_ENABLED
	PluggableUSB().getInterface(&interfaces);
    1042:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_Z12PluggableUSBv>
    1046:	be 01       	movw	r22, r28
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN13PluggableUSB_12getInterfaceEPh>
#endif

	return interfaces;
}
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <_ZN6LockEPC1Eh>:
#define USB_RECV_TIMEOUT
class LockEP
{
	u8 _sreg;
public:
	LockEP(u8 ep) : _sreg(SREG)
    105a:	2f b7       	in	r18, 0x3f	; 63
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
	{
		cli();
    1060:	f8 94       	cli
		SetEP(ep & 7);
    1062:	67 70       	andi	r22, 0x07	; 7
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1064:	60 93 e9 00 	sts	0x00E9, r22
    1068:	08 95       	ret

0000106a <_Z13USB_Availableh>:
	}
};

//	Number of bytes, assumes a rx endpoint
u8 USB_Available(u8 ep)
{
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	1f 92       	push	r1
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	LockEP lock(ep);
    1074:	68 2f       	mov	r22, r24
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LockEPC1Eh>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    107e:	80 91 f2 00 	lds	r24, 0x00F2
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1082:	99 81       	ldd	r25, Y+1	; 0x01
    1084:	9f bf       	out	0x3f, r25	; 63
//	Number of bytes, assumes a rx endpoint
u8 USB_Available(u8 ep)
{
	LockEP lock(ep);
	return FifoByteCount();
}
    1086:	0f 90       	pop	r0
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <_Z8USB_RecvhPvi>:

//	Non Blocking receive
//	Return number of bytes read
int USB_Recv(u8 ep, void* d, int len)
{
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <_Z8USB_RecvhPvi+0xc>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	f6 2e       	mov	r15, r22
    10a0:	8a 01       	movw	r16, r20
	if (!_usbConfiguration || len < 0)
    10a2:	90 91 5e 02 	lds	r25, 0x025E
    10a6:	99 23       	and	r25, r25
    10a8:	11 f0       	breq	.+4      	; 0x10ae <_Z8USB_RecvhPvi+0x20>
    10aa:	57 ff       	sbrs	r21, 7
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <_Z8USB_RecvhPvi+0x26>
		return -1;
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <_Z8USB_RecvhPvi+0x7c>
	
	LockEP lock(ep);
    10b4:	68 2f       	mov	r22, r24
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	7a 83       	std	Y+2, r23	; 0x02
    10bc:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LockEPC1Eh>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    10c0:	80 91 f2 00 	lds	r24, 0x00F2
	if (!_usbConfiguration || len < 0)
		return -1;
	
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a8 01       	movw	r20, r16
    10c8:	7a 81       	ldd	r23, Y+2	; 0x02
    10ca:	80 17       	cp	r24, r16
    10cc:	91 07       	cpc	r25, r17
    10ce:	0c f4       	brge	.+2      	; 0x10d2 <_Z8USB_RecvhPvi+0x44>
    10d0:	ac 01       	movw	r20, r24
    10d2:	ef 2d       	mov	r30, r15
    10d4:	f7 2f       	mov	r31, r23
    10d6:	f4 0e       	add	r15, r20
}

static inline u8 Recv8()
{
	RXLED1;					// light the RX LED
	RxLEDPulse = TX_RX_LED_PULSE_MS;
    10d8:	84 e6       	ldi	r24, 0x64	; 100
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
    10da:	fe 16       	cp	r15, r30
    10dc:	39 f0       	breq	.+14     	; 0x10ec <_Z8USB_RecvhPvi+0x5e>
	RxLEDPulse = TX_RX_LED_PULSE_MS;	
}

static inline u8 Recv8()
{
	RXLED1;					// light the RX LED
    10de:	28 98       	cbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_MS;
    10e0:	80 93 5f 02 	sts	0x025F, r24

	return UEDATX;	
    10e4:	90 91 f1 00 	lds	r25, 0x00F1
	u8 n = FifoByteCount();
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
		*dst++ = Recv8();
    10e8:	91 93       	st	Z+, r25
    10ea:	f7 cf       	rjmp	.-18     	; 0x10da <_Z8USB_RecvhPvi+0x4c>
	if (len && !FifoByteCount())	// release empty buffer
    10ec:	41 15       	cp	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	21 f0       	breq	.+8      	; 0x10fa <_Z8USB_RecvhPvi+0x6c>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    10f2:	80 91 f2 00 	lds	r24, 0x00F2
	len = min(n,len);
	n = len;
	u8* dst = (u8*)d;
	while (n--)
		*dst++ = Recv8();
	if (len && !FifoByteCount())	// release empty buffer
    10f6:	88 23       	and	r24, r24
    10f8:	21 f0       	breq	.+8      	; 0x1102 <_Z8USB_RecvhPvi+0x74>
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	8f bf       	out	0x3f, r24	; 63
	if (!_usbConfiguration || len < 0)
		return -1;
	
	LockEP lock(ep);
	u8 n = FifoByteCount();
	len = min(n,len);
    10fe:	ca 01       	movw	r24, r20
    1100:	04 c0       	rjmp	.+8      	; 0x110a <_Z8USB_RecvhPvi+0x7c>
	return UEINTX & (1<<FIFOCON);
}

static inline void ReleaseRX()
{
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
    1102:	8b e6       	ldi	r24, 0x6B	; 107
    1104:	80 93 e8 00 	sts	0x00E8, r24
    1108:	f8 cf       	rjmp	.-16     	; 0x10fa <_Z8USB_RecvhPvi+0x6c>
		*dst++ = Recv8();
	if (len && !FifoByteCount())	// release empty buffer
		ReleaseRX();
	
	return len;
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	08 95       	ret

0000111a <_Z8USB_Recvh>:

//	Recv 1 byte if ready
int USB_Recv(u8 ep)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	1f 92       	push	r1
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	u8 c;
	if (USB_Recv(ep,&c,1) != 1)
    1124:	41 e0       	ldi	r20, 0x01	; 1
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	be 01       	movw	r22, r28
    112a:	6f 5f       	subi	r22, 0xFF	; 255
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	0e 94 47 08 	call	0x108e	; 0x108e <_Z8USB_RecvhPvi>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	19 f4       	brne	.+6      	; 0x113c <_Z8USB_Recvh+0x22>
		return -1;
	return c;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <_Z8USB_Recvh+0x26>
//	Recv 1 byte if ready
int USB_Recv(u8 ep)
{
	u8 c;
	if (USB_Recv(ep,&c,1) != 1)
		return -1;
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	9f ef       	ldi	r25, 0xFF	; 255
	return c;
}
    1140:	0f 90       	pop	r0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <_Z13USB_SendSpaceh>:

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	1f 92       	push	r1
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	LockEP lock(ep);
    1152:	68 2f       	mov	r22, r24
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LockEPC1Eh>
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    115c:	90 91 e8 00 	lds	r25, 0x00E8

//	Space in send EP
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
    1160:	89 2f       	mov	r24, r25
    1162:	80 72       	andi	r24, 0x20	; 32
    1164:	95 ff       	sbrs	r25, 5
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <_Z13USB_SendSpaceh+0x28>
	UENUM = ep;
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    1168:	90 91 f2 00 	lds	r25, 0x00F2
u8 USB_SendSpace(u8 ep)
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return USB_EP_SIZE - FifoByteCount();
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	89 1b       	sub	r24, r25
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1170:	99 81       	ldd	r25, Y+1	; 0x01
    1172:	9f bf       	out	0x3f, r25	; 63
{
	LockEP lock(ep);
	if (!ReadWriteAllowed())
		return 0;
	return USB_EP_SIZE - FifoByteCount();
}
    1174:	0f 90       	pop	r0
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

0000117c <_Z8USB_SendhPKvi>:

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
    117c:	6f 92       	push	r6
    117e:	7f 92       	push	r7
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	1f 92       	push	r1
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	78 2e       	mov	r7, r24
    11a0:	7b 01       	movw	r14, r22
    11a2:	c4 2e       	mov	r12, r20
    11a4:	b5 2e       	mov	r11, r21
	if (!_usbConfiguration)
    11a6:	80 91 5e 02 	lds	r24, 0x025E
    11aa:	88 23       	and	r24, r24
    11ac:	69 f0       	breq	.+26     	; 0x11c8 <_Z8USB_SendhPKvi+0x4c>
    11ae:	04 2f       	mov	r16, r20
    11b0:	15 2f       	mov	r17, r21
    11b2:	8a ef       	ldi	r24, 0xFA	; 250
    11b4:	d8 2e       	mov	r13, r24
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
				continue;
			len -= n;
			if (ep & TRANSFER_ZERO)
    11b6:	87 2d       	mov	r24, r7
    11b8:	80 72       	andi	r24, 0x20	; 32
    11ba:	98 2e       	mov	r9, r24
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    11bc:	9a e3       	ldi	r25, 0x3A	; 58
    11be:	a9 2e       	mov	r10, r25
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    11c0:	87 2d       	mov	r24, r7
    11c2:	80 74       	andi	r24, 0x40	; 64
    11c4:	88 2e       	mov	r8, r24
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <_Z8USB_SendhPKvi+0x6e>

//	Blocking Send of data to an endpoint
int USB_Send(u8 ep, const void* d, int len)
{
	if (!_usbConfiguration)
		return -1;
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	57 c0       	rjmp	.+174    	; 0x127c <_Z8USB_SendhPKvi+0x100>
	int r = len;
	const u8* data = (const u8*)d;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
	{
		u8 n = USB_SendSpace(ep);
    11ce:	87 2d       	mov	r24, r7
    11d0:	0e 94 a4 08 	call	0x1148	; 0x1148 <_Z13USB_SendSpaceh>
    11d4:	68 2e       	mov	r6, r24
		if (n == 0)
    11d6:	81 11       	cpse	r24, r1
    11d8:	0c c0       	rjmp	.+24     	; 0x11f2 <_Z8USB_SendhPKvi+0x76>
		{
			if (!(--timeout))
    11da:	da 94       	dec	r13
    11dc:	a9 f3       	breq	.-22     	; 0x11c8 <_Z8USB_SendhPKvi+0x4c>
				return -1;
			delay(1);
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <delay>
		return -1;

	int r = len;
	const u8* data = (const u8*)d;
	u8 timeout = 250;		// 250ms timeout on send? TODO
	while (len)
    11ea:	01 15       	cp	r16, r1
    11ec:	11 05       	cpc	r17, r1
    11ee:	79 f7       	brne	.-34     	; 0x11ce <_Z8USB_SendhPKvi+0x52>
    11f0:	3b c0       	rjmp	.+118    	; 0x1268 <_Z8USB_SendhPKvi+0xec>
				return -1;
			delay(1);
			continue;
		}

		if (n > len)
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	02 17       	cp	r16, r18
    11f8:	13 07       	cpc	r17, r19
    11fa:	0c f4       	brge	.+2      	; 0x11fe <_Z8USB_SendhPKvi+0x82>
			n = len;
    11fc:	60 2e       	mov	r6, r16
		{
			LockEP lock(ep);
    11fe:	67 2d       	mov	r22, r7
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LockEPC1Eh>
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    1208:	80 91 e8 00 	lds	r24, 0x00E8
		if (n > len)
			n = len;
		{
			LockEP lock(ep);
			// Frame may have been released by the SOF interrupt handler
			if (!ReadWriteAllowed())
    120c:	85 ff       	sbrs	r24, 5
    120e:	29 c0       	rjmp	.+82     	; 0x1262 <_Z8USB_SendhPKvi+0xe6>
				continue;
			len -= n;
    1210:	26 2d       	mov	r18, r6
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	02 1b       	sub	r16, r18
    1216:	13 0b       	sbc	r17, r19
			if (ep & TRANSFER_ZERO)
    1218:	99 20       	and	r9, r9
    121a:	39 f0       	breq	.+14     	; 0x122a <_Z8USB_SendhPKvi+0xae>
			{
				while (n--)
    121c:	6a 94       	dec	r6
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	68 16       	cp	r6, r24
    1222:	b1 f0       	breq	.+44     	; 0x1250 <_Z8USB_SendhPKvi+0xd4>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1224:	10 92 f1 00 	sts	0x00F1, r1
    1228:	f9 cf       	rjmp	.-14     	; 0x121c <_Z8USB_SendhPKvi+0xa0>
			if (ep & TRANSFER_ZERO)
			{
				while (n--)
					Send8(0);
			}
			else if (ep & TRANSFER_PGM)
    122a:	f7 01       	movw	r30, r14
    122c:	86 2d       	mov	r24, r6
    122e:	77 fe       	sbrs	r7, 7
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <_Z8USB_SendhPKvi+0xc4>
			{
				while (n--)
    1232:	81 50       	subi	r24, 0x01	; 1
    1234:	58 f0       	brcs	.+22     	; 0x124c <_Z8USB_SendhPKvi+0xd0>
					Send8(pgm_read_byte(data++));
    1236:	94 91       	lpm	r25, Z
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1238:	90 93 f1 00 	sts	0x00F1, r25
    123c:	31 96       	adiw	r30, 0x01	; 1
    123e:	f9 cf       	rjmp	.-14     	; 0x1232 <_Z8USB_SendhPKvi+0xb6>
				while (n--)
					Send8(pgm_read_byte(data++));
			}
			else
			{
				while (n--)
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	20 f0       	brcs	.+8      	; 0x124c <_Z8USB_SendhPKvi+0xd0>
					Send8(*data++);
    1244:	91 91       	ld	r25, Z+
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1246:	90 93 f1 00 	sts	0x00F1, r25
    124a:	fa cf       	rjmp	.-12     	; 0x1240 <_Z8USB_SendhPKvi+0xc4>
    124c:	e2 0e       	add	r14, r18
    124e:	f3 1e       	adc	r15, r19
	UECONX = (1<<STALLRQ) | (1<<EPEN);
}

static inline u8 ReadWriteAllowed()
{
	return UEINTX & (1<<RWAL);
    1250:	80 91 e8 00 	lds	r24, 0x00E8
			else
			{
				while (n--)
					Send8(*data++);
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
    1254:	85 ff       	sbrs	r24, 5
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <_Z8USB_SendhPKvi+0xfa>
    1258:	01 15       	cp	r16, r1
    125a:	11 05       	cpc	r17, r1
    125c:	11 f4       	brne	.+4      	; 0x1262 <_Z8USB_SendhPKvi+0xe6>
    125e:	81 10       	cpse	r8, r1
    1260:	0a c0       	rjmp	.+20     	; 0x1276 <_Z8USB_SendhPKvi+0xfa>
		cli();
		SetEP(ep & 7);
	}
	~LockEP()
	{
		SREG = _sreg;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8f bf       	out	0x3f, r24	; 63
    1266:	c1 cf       	rjmp	.-126    	; 0x11ea <_Z8USB_SendhPKvi+0x6e>
			}
			if (!ReadWriteAllowed() || ((len == 0) && (ep & TRANSFER_RELEASE)))	// Release full buffer
				ReleaseTX();
		}
	}
	TXLED1;					// light the TX LED
    1268:	5d 98       	cbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_MS;
    126a:	84 e6       	ldi	r24, 0x64	; 100
    126c:	80 93 60 02 	sts	0x0260, r24
	return r;
    1270:	8c 2d       	mov	r24, r12
    1272:	9b 2d       	mov	r25, r11
    1274:	03 c0       	rjmp	.+6      	; 0x127c <_Z8USB_SendhPKvi+0x100>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    1276:	a0 92 e8 00 	sts	0x00E8, r10
    127a:	f3 cf       	rjmp	.-26     	; 0x1262 <_Z8USB_SendhPKvi+0xe6>
		}
	}
	TXLED1;					// light the TX LED
	TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
    127c:	0f 90       	pop	r0
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	08 95       	ret

0000129c <_Z11InitControli>:
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    129c:	10 92 e9 00 	sts	0x00E9, r1
static int _cmark;
static int _cend;
void InitControl(int end)
{
	SetEP(0);
	_cmark = 0;
    12a0:	10 92 5b 02 	sts	0x025B, r1
    12a4:	10 92 5a 02 	sts	0x025A, r1
	_cend = end;
    12a8:	90 93 59 02 	sts	0x0259, r25
    12ac:	80 93 58 02 	sts	0x0258, r24
    12b0:	08 95       	ret

000012b2 <_Z15USB_SendControlhPKvi>:
	return true;
};

//	Clipped by _cmark/_cend
int USB_SendControl(u8 flags, const void* d, int len)
{
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <_Z15USB_SendControlhPKvi+0x10>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	f8 2e       	mov	r15, r24
    12c8:	8a 01       	movw	r16, r20
	int sent = len;
	const u8* data = (const u8*)d;
	bool pgm = flags & TRANSFER_PGM;
	while (len--)
    12ca:	6b 01       	movw	r12, r22
    12cc:	01 15       	cp	r16, r1
    12ce:	11 05       	cpc	r17, r1
    12d0:	b1 f0       	breq	.+44     	; 0x12fe <_Z15USB_SendControlhPKvi+0x4c>
	{
		u8 c = pgm ? pgm_read_byte(data++) : *data++;
    12d2:	f6 01       	movw	r30, r12
    12d4:	f7 fe       	sbrs	r15, 7
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <_Z15USB_SendControlhPKvi+0x2a>
    12d8:	84 91       	lpm	r24, Z
    12da:	01 c0       	rjmp	.+2      	; 0x12de <_Z15USB_SendControlhPKvi+0x2c>
    12dc:	80 81       	ld	r24, Z
		if (!SendControl(c))
    12de:	49 83       	std	Y+1, r20	; 0x01
    12e0:	5a 83       	std	Y+2, r21	; 0x02
    12e2:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZL11SendControlh>
    12e6:	01 50       	subi	r16, 0x01	; 1
    12e8:	11 09       	sbc	r17, r1
    12ea:	ff ef       	ldi	r31, 0xFF	; 255
    12ec:	cf 1a       	sub	r12, r31
    12ee:	df 0a       	sbc	r13, r31
    12f0:	49 81       	ldd	r20, Y+1	; 0x01
    12f2:	5a 81       	ldd	r21, Y+2	; 0x02
    12f4:	81 11       	cpse	r24, r1
    12f6:	ea cf       	rjmp	.-44     	; 0x12cc <_Z15USB_SendControlhPKvi+0x1a>
			return -1;
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <_Z15USB_SendControlhPKvi+0x4e>
	}
	return sent;
    12fe:	ca 01       	movw	r24, r20
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	08 95       	ret

00001314 <_Z15USB_RecvControlPvi>:
        return true;
}

//	Does not timeout or cross fifo boundaries
int USB_RecvControl(void* d, int len)
{
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	6c 01       	movw	r12, r24
    1328:	8b 01       	movw	r16, r22
	auto length = len;
    132a:	eb 01       	movw	r28, r22
	return (UEINTX & (1<<RXOUTI)) == 0;
}

static inline void ClearOUT(void)
{
	UEINTX = ~(1<<RXOUTI);
    132c:	3b ef       	ldi	r19, 0xFB	; 251
    132e:	b3 2e       	mov	r11, r19

//	Does not timeout or cross fifo boundaries
int USB_RecvControl(void* d, int len)
{
	auto length = len;
	while(length)
    1330:	20 97       	sbiw	r28, 0x00	; 0
    1332:	c1 f0       	breq	.+48     	; 0x1364 <_Z15USB_RecvControlPvi+0x50>
    1334:	7e 01       	movw	r14, r28
    1336:	c1 34       	cpi	r28, 0x41	; 65
    1338:	d1 05       	cpc	r29, r1
    133a:	1c f0       	brlt	.+6      	; 0x1342 <_Z15USB_RecvControlPvi+0x2e>
    133c:	20 e4       	ldi	r18, 0x40	; 64
    133e:	e2 2e       	mov	r14, r18
    1340:	f1 2c       	mov	r15, r1
	UEINTX = ~(1<<TXINI);
}

static inline void WaitOUT(void)
{
	while (!(UEINTX & (1<<RXOUTI)))
    1342:	80 91 e8 00 	lds	r24, 0x00E8
    1346:	82 ff       	sbrs	r24, 2
    1348:	fc cf       	rjmp	.-8      	; 0x1342 <_Z15USB_RecvControlPvi+0x2e>
			recvLength = 64;
		}

		// Write data to fit to the end (not the beginning) of the array
		WaitOUT();
		Recv((u8*)d + len - length, recvLength);
    134a:	c8 01       	movw	r24, r16
    134c:	8c 1b       	sub	r24, r28
    134e:	9d 0b       	sbc	r25, r29
    1350:	6e 2d       	mov	r22, r14
    1352:	8c 0d       	add	r24, r12
    1354:	9d 1d       	adc	r25, r13
    1356:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZL4RecvPVhh>
	return (UEINTX & (1<<RXOUTI)) == 0;
}

static inline void ClearOUT(void)
{
	UEINTX = ~(1<<RXOUTI);
    135a:	b0 92 e8 00 	sts	0x00E8, r11

		// Write data to fit to the end (not the beginning) of the array
		WaitOUT();
		Recv((u8*)d + len - length, recvLength);
		ClearOUT();
		length -= recvLength;
    135e:	ce 19       	sub	r28, r14
    1360:	df 09       	sbc	r29, r15
    1362:	e6 cf       	rjmp	.-52     	; 0x1330 <_Z15USB_RecvControlPvi+0x1c>
	}
	return len;
}
    1364:	c8 01       	movw	r24, r16
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	bf 90       	pop	r11
    1378:	08 95       	ret

0000137a <__vector_11>:
	return true;
}

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    137a:	1f 92       	push	r1
    137c:	0f 92       	push	r0
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	0f 92       	push	r0
    1382:	11 24       	eor	r1, r1
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	6c 97       	sbiw	r28, 0x1c	; 28
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	cd bf       	out	0x3d, r28	; 61
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    13b4:	10 92 e9 00 	sts	0x00E9, r1
	return UEBCLX;
}

static inline u8 ReceivedSetupInt()
{
	return UEINTX & (1<<RXSTPI);
    13b8:	80 91 e8 00 	lds	r24, 0x00E8

//	Endpoint 0 interrupt
ISR(USB_COM_vect)
{
    SetEP(0);
	if (!ReceivedSetupInt())
    13bc:	83 ff       	sbrs	r24, 3
    13be:	23 c1       	rjmp	.+582    	; 0x1606 <__vector_11+0x28c>
		return;

	USBSetup setup;
	Recv((u8*)&setup,8);
    13c0:	68 e0       	ldi	r22, 0x08	; 8
    13c2:	ce 01       	movw	r24, r28
    13c4:	45 96       	adiw	r24, 0x15	; 21
    13c6:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZL4RecvPVhh>
	return UEINTX & (1<<RXSTPI);
}

static inline void ClearSetupInt()
{
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    13ca:	82 ef       	ldi	r24, 0xF2	; 242
    13cc:	80 93 e8 00 	sts	0x00E8, r24

	USBSetup setup;
	Recv((u8*)&setup,8);
	ClearSetupInt();

	u8 requestType = setup.bmRequestType;
    13d0:	3d 89       	ldd	r19, Y+21	; 0x15
	if (requestType & REQUEST_DEVICETOHOST)
    13d2:	37 ff       	sbrs	r19, 7
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <__vector_11+0x66>
volatile u8 _usbCurrentStatus = 0; // meaning of bits see usb_20.pdf, Figure 9-4. Information Returned by a GetStatus() Request to a Device
volatile u8 _usbSuspendState = 0; // copy of UDINT to check SUSPI and WAKEUPI bits

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)))
    13d6:	80 91 e8 00 	lds	r24, 0x00E8
    13da:	80 ff       	sbrs	r24, 0
    13dc:	fc cf       	rjmp	.-8      	; 0x13d6 <__vector_11+0x5c>
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <__vector_11+0x6c>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    13e0:	8e ef       	ldi	r24, 0xFE	; 254
    13e2:	80 93 e8 00 	sts	0x00E8, r24
		WaitIN();
	else
		ClearIN();

    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
    13e6:	83 2f       	mov	r24, r19
    13e8:	80 76       	andi	r24, 0x60	; 96
    13ea:	09 f0       	breq	.+2      	; 0x13ee <__vector_11+0x74>
    13ec:	f0 c0       	rjmp	.+480    	; 0x15ce <__vector_11+0x254>
	{
		//	Standard Requests
		u8 r = setup.bRequest;
    13ee:	2e 89       	ldd	r18, Y+22	; 0x16
		u16 wValue = setup.wValueL | (setup.wValueH << 8);
    13f0:	4f 89       	ldd	r20, Y+23	; 0x17
    13f2:	d8 8c       	ldd	r13, Y+24	; 0x18
		if (GET_STATUS == r)
    13f4:	21 11       	cpse	r18, r1
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <__vector_11+0x96>
		{
			if (requestType == (REQUEST_DEVICETOHOST | REQUEST_STANDARD | REQUEST_DEVICE))
    13f8:	30 38       	cpi	r19, 0x80	; 128
    13fa:	29 f4       	brne	.+10     	; 0x1406 <__vector_11+0x8c>
			{
				Send8(_usbCurrentStatus);
    13fc:	80 91 5d 02 	lds	r24, 0x025D
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1400:	80 93 f1 00 	sts	0x00F1, r24
    1404:	02 c0       	rjmp	.+4      	; 0x140a <__vector_11+0x90>
    1406:	10 92 f1 00 	sts	0x00F1, r1
    140a:	10 92 f1 00 	sts	0x00F1, r1
    140e:	f4 c0       	rjmp	.+488    	; 0x15f8 <__vector_11+0x27e>
    bool ok = true;
	if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
	{
		//	Standard Requests
		u8 r = setup.bRequest;
		u16 wValue = setup.wValueL | (setup.wValueH << 8);
    1410:	84 2f       	mov	r24, r20
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9d 29       	or	r25, r13
				// see "Figure 9-6. Information Returned by a GetStatus() Request to an Endpoint" in usb_20.pdf for more information
				Send8(0);
				Send8(0);
			}
		}
		else if (CLEAR_FEATURE == r)
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	49 f4       	brne	.+18     	; 0x142c <__vector_11+0xb2>
		{
			if((requestType == (REQUEST_HOSTTODEVICE | REQUEST_STANDARD | REQUEST_DEVICE))
    141a:	31 11       	cpse	r19, r1
    141c:	ed c0       	rjmp	.+474    	; 0x15f8 <__vector_11+0x27e>
				&& (wValue == DEVICE_REMOTE_WAKEUP))
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_11+0xaa>
    1422:	ea c0       	rjmp	.+468    	; 0x15f8 <__vector_11+0x27e>
			{
				_usbCurrentStatus &= ~FEATURE_REMOTE_WAKEUP_ENABLED;
    1424:	80 91 5d 02 	lds	r24, 0x025D
    1428:	8d 7f       	andi	r24, 0xFD	; 253
    142a:	0a c0       	rjmp	.+20     	; 0x1440 <__vector_11+0xc6>
			}
		}
		else if (SET_FEATURE == r)
    142c:	23 30       	cpi	r18, 0x03	; 3
    142e:	59 f4       	brne	.+22     	; 0x1446 <__vector_11+0xcc>
		{
			if((requestType == (REQUEST_HOSTTODEVICE | REQUEST_STANDARD | REQUEST_DEVICE))
    1430:	31 11       	cpse	r19, r1
    1432:	e2 c0       	rjmp	.+452    	; 0x15f8 <__vector_11+0x27e>
				&& (wValue == DEVICE_REMOTE_WAKEUP))
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	09 f0       	breq	.+2      	; 0x143a <__vector_11+0xc0>
    1438:	df c0       	rjmp	.+446    	; 0x15f8 <__vector_11+0x27e>
			{
				_usbCurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    143a:	80 91 5d 02 	lds	r24, 0x025D
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	80 93 5d 02 	sts	0x025D, r24
    1444:	d9 c0       	rjmp	.+434    	; 0x15f8 <__vector_11+0x27e>
			}
		}
		else if (SET_ADDRESS == r)
    1446:	25 30       	cpi	r18, 0x05	; 5
    1448:	41 f4       	brne	.+16     	; 0x145a <__vector_11+0xe0>
volatile u8 _usbCurrentStatus = 0; // meaning of bits see usb_20.pdf, Figure 9-4. Information Returned by a GetStatus() Request to a Device
volatile u8 _usbSuspendState = 0; // copy of UDINT to check SUSPI and WAKEUPI bits

static inline void WaitIN(void)
{
	while (!(UEINTX & (1<<TXINI)))
    144a:	80 91 e8 00 	lds	r24, 0x00E8
    144e:	80 ff       	sbrs	r24, 0
    1450:	fc cf       	rjmp	.-8      	; 0x144a <__vector_11+0xd0>
			}
		}
		else if (SET_ADDRESS == r)
		{
			WaitIN();
			UDADDR = setup.wValueL | (1<<ADDEN);
    1452:	40 68       	ori	r20, 0x80	; 128
    1454:	40 93 e3 00 	sts	0x00E3, r20
    1458:	cf c0       	rjmp	.+414    	; 0x15f8 <__vector_11+0x27e>
		}
		else if (GET_DESCRIPTOR == r)
    145a:	26 30       	cpi	r18, 0x06	; 6
    145c:	09 f0       	breq	.+2      	; 0x1460 <__vector_11+0xe6>
    145e:	8d c0       	rjmp	.+282    	; 0x157a <__vector_11+0x200>
    1460:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1462:	fc 8c       	ldd	r15, Y+28	; 0x1c
static
bool SendDescriptor(USBSetup& setup)
{
	int ret;
	u8 t = setup.wValueH;
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
    1464:	22 e0       	ldi	r18, 0x02	; 2
    1466:	d2 12       	cpse	r13, r18
    1468:	2c c0       	rjmp	.+88     	; 0x14c2 <__vector_11+0x148>
//	TODO
static
bool SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	InitControl(0);	
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z11InitControli>
	u8 interfaces = SendInterfaces();
    1472:	0e 94 17 08 	call	0x102e	; 0x102e <_ZL14SendInterfacesv>
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
    1476:	99 e0       	ldi	r25, 0x09	; 9
    1478:	8e 01       	movw	r16, r28
    147a:	0f 5f       	subi	r16, 0xFF	; 255
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
    147e:	f8 01       	movw	r30, r16
    1480:	29 2f       	mov	r18, r25
    1482:	11 92       	st	Z+, r1
    1484:	2a 95       	dec	r18
    1486:	e9 f7       	brne	.-6      	; 0x1482 <__vector_11+0x108>
    1488:	99 83       	std	Y+1, r25	; 0x01
    148a:	da 82       	std	Y+2, r13	; 0x02
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	90 ea       	ldi	r25, 0xA0	; 160
    1492:	98 87       	std	Y+8, r25	; 0x08
    1494:	9a ef       	ldi	r25, 0xFA	; 250
    1496:	99 87       	std	Y+9, r25	; 0x09
    1498:	20 91 5a 02 	lds	r18, 0x025A
    149c:	30 91 5b 02 	lds	r19, 0x025B
    14a0:	27 5f       	subi	r18, 0xF7	; 247
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	3c 83       	std	Y+4, r19	; 0x04
    14a6:	2b 83       	std	Y+3, r18	; 0x03
    14a8:	8d 83       	std	Y+5, r24	; 0x05

	//	Now send them
	InitControl(maxlen);
    14aa:	c7 01       	movw	r24, r14
    14ac:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z11InitControli>
	USB_SendControl(0,&config,sizeof(ConfigDescriptor));
    14b0:	49 e0       	ldi	r20, 0x09	; 9
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	b8 01       	movw	r22, r16
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_Z15USB_SendControlhPKvi>
	SendInterfaces();
    14bc:	0e 94 17 08 	call	0x102e	; 0x102e <_ZL14SendInterfacesv>
    14c0:	9b c0       	rjmp	.+310    	; 0x15f8 <__vector_11+0x27e>
	int ret;
	u8 t = setup.wValueH;
	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
		return SendConfiguration(setup.wLength);

	InitControl(setup.wLength);
    14c2:	c7 01       	movw	r24, r14
    14c4:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z11InitControli>
#ifdef PLUGGABLE_USB_ENABLED
	ret = PluggableUSB().getDescriptor(setup);
    14c8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_Z12PluggableUSBv>
    14cc:	be 01       	movw	r22, r28
    14ce:	6b 5e       	subi	r22, 0xEB	; 235
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <__vector_11+0x166>
		return (ret > 0 ? true : false);
    14da:	0c f0       	brlt	.+2      	; 0x14de <__vector_11+0x164>
    14dc:	8d c0       	rjmp	.+282    	; 0x15f8 <__vector_11+0x27e>
    14de:	90 c0       	rjmp	.+288    	; 0x1600 <__vector_11+0x286>
	}
#endif

	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	d8 12       	cpse	r13, r24
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <__vector_11+0x188>
	{
		if (setup.wLength == 8)
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	08 97       	sbiw	r24, 0x08	; 8
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <__vector_11+0x17a>
			_cdcComposite = 1;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	80 93 57 02 	sts	0x0257, r24
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorB : (const u8*)&USB_DeviceDescriptor;
    14f4:	80 91 57 02 	lds	r24, 0x0257
    14f8:	81 11       	cpse	r24, r1
    14fa:	2f c0       	rjmp	.+94     	; 0x155a <__vector_11+0x1e0>
    14fc:	67 e9       	ldi	r22, 0x97	; 151
    14fe:	71 e0       	ldi	r23, 0x01	; 1
    1500:	31 c0       	rjmp	.+98     	; 0x1564 <__vector_11+0x1ea>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    1502:	e3 e0       	ldi	r30, 0x03	; 3
    1504:	de 12       	cpse	r13, r30
    1506:	7c c0       	rjmp	.+248    	; 0x1600 <__vector_11+0x286>
	{
		if (setup.wValueL == 0) {
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	88 23       	and	r24, r24
    150c:	49 f1       	breq	.+82     	; 0x1560 <__vector_11+0x1e6>
			desc_addr = (const u8*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	29 f4       	brne	.+10     	; 0x151c <__vector_11+0x1a2>
			return USB_SendStringDescriptor(STRING_PRODUCT, strlen(USB_PRODUCT), TRANSFER_PGM);
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	60 e1       	ldi	r22, 0x10	; 16
    1516:	85 eb       	ldi	r24, 0xB5	; 181
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	1c c0       	rjmp	.+56     	; 0x1554 <__vector_11+0x1da>
		}
		else if (setup.wValueL == IMANUFACTURER) {
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	29 f4       	brne	.+10     	; 0x152a <__vector_11+0x1b0>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, strlen(USB_MANUFACTURER), TRANSFER_PGM);
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	6b e0       	ldi	r22, 0x0B	; 11
    1524:	89 ea       	ldi	r24, 0xA9	; 169
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	15 c0       	rjmp	.+42     	; 0x1554 <__vector_11+0x1da>
		}
		else if (setup.wValueL == ISERIAL) {
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	09 f0       	breq	.+2      	; 0x1530 <__vector_11+0x1b6>
    152e:	68 c0       	rjmp	.+208    	; 0x1600 <__vector_11+0x286>
#ifdef PLUGGABLE_USB_ENABLED
			char name[ISERIAL_MAX_LEN];
			PluggableUSB().getShortName(name);
    1530:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_Z12PluggableUSBv>
    1534:	8e 01       	movw	r16, r28
    1536:	0f 5f       	subi	r16, 0xFF	; 255
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	b8 01       	movw	r22, r16
    153c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN13PluggableUSB_12getShortNameEPc>
			return USB_SendStringDescriptor((uint8_t*)name, strlen(name), 0);
    1540:	f8 01       	movw	r30, r16
    1542:	01 90       	ld	r0, Z+
    1544:	00 20       	and	r0, r0
    1546:	e9 f7       	brne	.-6      	; 0x1542 <__vector_11+0x1c8>
    1548:	31 97       	sbiw	r30, 0x01	; 1
    154a:	e0 1b       	sub	r30, r16
    154c:	f1 0b       	sbc	r31, r17
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	6e 2f       	mov	r22, r30
    1552:	c8 01       	movw	r24, r16
    1554:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZL24USB_SendStringDescriptorPKhhh>
    1558:	4d c0       	rjmp	.+154    	; 0x15f4 <__vector_11+0x27a>
	const u8* desc_addr = 0;
	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
	{
		if (setup.wLength == 8)
			_cdcComposite = 1;
		desc_addr = _cdcComposite ?  (const u8*)&USB_DeviceDescriptorB : (const u8*)&USB_DeviceDescriptor;
    155a:	65 e8       	ldi	r22, 0x85	; 133
    155c:	71 e0       	ldi	r23, 0x01	; 1
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <__vector_11+0x1ea>
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
	{
		if (setup.wValueL == 0) {
			desc_addr = (const u8*)&STRING_LANGUAGE;
    1560:	66 ec       	ldi	r22, 0xC6	; 198
    1562:	71 e0       	ldi	r23, 0x01	; 1
		}
		else
			return false;
	}

	if (desc_addr == 0)
    1564:	61 15       	cp	r22, r1
    1566:	71 05       	cpc	r23, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <__vector_11+0x1f2>
    156a:	4a c0       	rjmp	.+148    	; 0x1600 <__vector_11+0x286>
		return false;
	u8 desc_length = pgm_read_byte(desc_addr);
    156c:	fb 01       	movw	r30, r22
    156e:	44 91       	lpm	r20, Z

	USB_SendControl(TRANSFER_PGM,desc_addr,desc_length);
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_Z15USB_SendControlhPKvi>
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <__vector_11+0x27e>
		}
		else if (GET_DESCRIPTOR == r)
		{
			ok = SendDescriptor(setup);
		}
		else if (SET_DESCRIPTOR == r)
    157a:	27 30       	cpi	r18, 0x07	; 7
    157c:	09 f4       	brne	.+2      	; 0x1580 <__vector_11+0x206>
    157e:	40 c0       	rjmp	.+128    	; 0x1600 <__vector_11+0x286>
		{
			ok = false;
		}
		else if (GET_CONFIGURATION == r)
    1580:	28 30       	cpi	r18, 0x08	; 8
    1582:	21 f4       	brne	.+8      	; 0x158c <__vector_11+0x212>
	return UEDATX;	
}

static inline void Send8(u8 d)
{
	UEDATX = d;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 f1 00 	sts	0x00F1, r24
    158a:	36 c0       	rjmp	.+108    	; 0x15f8 <__vector_11+0x27e>
		}
		else if (GET_CONFIGURATION == r)
		{
			Send8(1);
		}
		else if (SET_CONFIGURATION == r)
    158c:	29 30       	cpi	r18, 0x09	; 9
    158e:	a1 f5       	brne	.+104    	; 0x15f8 <__vector_11+0x27e>
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
    1590:	33 70       	andi	r19, 0x03	; 3
    1592:	b1 f5       	brne	.+108    	; 0x1600 <__vector_11+0x286>
    1594:	e7 e9       	ldi	r30, 0x97	; 151
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	81 e0       	ldi	r24, 0x01	; 1
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
	{
		UENUM = i;
		UECONX = (1<<EPEN);
    159a:	21 e0       	ldi	r18, 0x01	; 1
		UECFG0X = _initEndpoints[i];
#if USB_EP_SIZE == 16
		UECFG1X = EP_SINGLE_16;
#elif USB_EP_SIZE == 64
		UECFG1X = EP_DOUBLE_64;
    159c:	36 e3       	ldi	r19, 0x36	; 54
}

static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
    159e:	90 81       	ld	r25, Z
    15a0:	99 23       	and	r25, r25
    15a2:	61 f0       	breq	.+24     	; 0x15bc <__vector_11+0x242>
	{
		UENUM = i;
    15a4:	80 93 e9 00 	sts	0x00E9, r24
		UECONX = (1<<EPEN);
    15a8:	20 93 eb 00 	sts	0x00EB, r18
		UECFG0X = _initEndpoints[i];
    15ac:	91 91       	ld	r25, Z+
    15ae:	90 93 ec 00 	sts	0x00EC, r25
#if USB_EP_SIZE == 16
		UECFG1X = EP_SINGLE_16;
#elif USB_EP_SIZE == 64
		UECFG1X = EP_DOUBLE_64;
    15b2:	30 93 ed 00 	sts	0x00ED, r19
}

static
void InitEndpoints()
{
	for (u8 i = 1; i < sizeof(_initEndpoints) && _initEndpoints[i] != 0; i++)
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	87 30       	cpi	r24, 0x07	; 7
    15ba:	89 f7       	brne	.-30     	; 0x159e <__vector_11+0x224>
		UECFG1X = EP_DOUBLE_64;
#else
#error Unsupported value for USB_EP_SIZE
#endif
	}
	UERST = 0x7E;	// And reset them
    15bc:	8e e7       	ldi	r24, 0x7E	; 126
    15be:	80 93 ea 00 	sts	0x00EA, r24
	UERST = 0;
    15c2:	10 92 ea 00 	sts	0x00EA, r1
		else if (SET_CONFIGURATION == r)
		{
			if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
			{
				InitEndpoints();
				_usbConfiguration = setup.wValueL;
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	80 93 5e 02 	sts	0x025E, r24
    15cc:	15 c0       	rjmp	.+42     	; 0x15f8 <__vector_11+0x27e>
		{
		}
	}
	else
	{
		InitControl(setup.wLength);		//	Max length of transfer
    15ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d2:	0e 94 4e 09 	call	0x129c	; 0x129c <_Z11InitControli>
static
bool ClassInterfaceRequest(USBSetup& setup)
{
	u8 i = setup.wIndex;

	if (CDC_ACM_INTERFACE == i)
    15d6:	89 8d       	ldd	r24, Y+25	; 0x19
    15d8:	81 11       	cpse	r24, r1
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <__vector_11+0x26c>
		return CDC_Setup(setup);
    15dc:	ce 01       	movw	r24, r28
    15de:	45 96       	adiw	r24, 0x15	; 21
    15e0:	0e 94 03 04 	call	0x806	; 0x806 <_Z9CDC_SetupR8USBSetup>
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <__vector_11+0x27a>

#ifdef PLUGGABLE_USB_ENABLED
	return PluggableUSB().setup(setup);
    15e6:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_Z12PluggableUSBv>
    15ea:	be 01       	movw	r22, r28
    15ec:	6b 5e       	subi	r22, 0xEB	; 235
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN13PluggableUSB_5setupER8USBSetup>
	{
		InitControl(setup.wLength);		//	Max length of transfer
		ok = ClassInterfaceRequest(setup);
	}

	if (ok)
    15f4:	88 23       	and	r24, r24
    15f6:	21 f0       	breq	.+8      	; 0x1600 <__vector_11+0x286>
		;
}

static inline void ClearIN(void)
{
	UEINTX = ~(1<<TXINI);
    15f8:	8e ef       	ldi	r24, 0xFE	; 254
    15fa:	80 93 e8 00 	sts	0x00E8, r24
    15fe:	03 c0       	rjmp	.+6      	; 0x1606 <__vector_11+0x28c>
	UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
}

static inline void Stall()
{
	UECONX = (1<<STALLRQ) | (1<<EPEN);
    1600:	81 e2       	ldi	r24, 0x21	; 33
    1602:	80 93 eb 00 	sts	0x00EB, r24
		ClearIN();
	else
	{
		Stall();
	}
}
    1606:	6c 96       	adiw	r28, 0x1c	; 28
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	ff 91       	pop	r31
    1618:	ef 91       	pop	r30
    161a:	bf 91       	pop	r27
    161c:	af 91       	pop	r26
    161e:	9f 91       	pop	r25
    1620:	8f 91       	pop	r24
    1622:	7f 91       	pop	r23
    1624:	6f 91       	pop	r22
    1626:	5f 91       	pop	r21
    1628:	4f 91       	pop	r20
    162a:	3f 91       	pop	r19
    162c:	2f 91       	pop	r18
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <_Z9USB_Flushh>:
	UEDATX = d;
}

static inline void SetEP(u8 ep)
{
	UENUM = ep;
    1642:	80 93 e9 00 	sts	0x00E9, r24
}

static inline u8 FifoByteCount()
{
	return UEBCLX;
    1646:	80 91 f2 00 	lds	r24, 0x00F2
}

void USB_Flush(u8 ep)
{
	SetEP(ep);
	if (FifoByteCount())
    164a:	88 23       	and	r24, r24
    164c:	19 f0       	breq	.+6      	; 0x1654 <_Z9USB_Flushh+0x12>
	UEINTX = 0x6B;	// FIFOCON=0 NAKINI=1 RWAL=1 NAKOUTI=0 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=1
}

static inline void ReleaseTX()
{
	UEINTX = 0x3A;	// FIFOCON=0 NAKINI=0 RWAL=1 NAKOUTI=1 RXSTPI=1 RXOUTI=0 STALLEDI=1 TXINI=0
    164e:	8a e3       	ldi	r24, 0x3A	; 58
    1650:	80 93 e8 00 	sts	0x00E8, r24
    1654:	08 95       	ret

00001656 <__vector_10>:
#endif
}

//	General interrupt
ISR(USB_GEN_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	cf 93       	push	r28
    1676:	ef 93       	push	r30
    1678:	ff 93       	push	r31
	u8 udint = UDINT;
    167a:	c0 91 e1 00 	lds	r28, 0x00E1
	UDINT = UDINT &= ~((1<<EORSTI) | (1<<SOFI)); // clear the IRQ flags for the IRQs which are handled here, except WAKEUPI and SUSPI (see below)
    167e:	80 91 e1 00 	lds	r24, 0x00E1
    1682:	83 7f       	andi	r24, 0xF3	; 243
    1684:	80 93 e1 00 	sts	0x00E1, r24
    1688:	80 93 e1 00 	sts	0x00E1, r24

	//	End of Reset
	if (udint & (1<<EORSTI))
    168c:	c3 ff       	sbrs	r28, 3
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <__vector_10+0x58>
#define EP_SINGLE_16 0x12

static
void InitEP(u8 index, u8 type, u8 size)
{
	UENUM = index;
    1690:	10 92 e9 00 	sts	0x00E9, r1
	UECONX = (1<<EPEN);
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 eb 00 	sts	0x00EB, r24
	UECFG0X = type;
    169a:	10 92 ec 00 	sts	0x00EC, r1
	UECFG1X = size;
    169e:	82 e3       	ldi	r24, 0x32	; 50
    16a0:	80 93 ed 00 	sts	0x00ED, r24

	//	End of Reset
	if (udint & (1<<EORSTI))
	{
		InitEP(0,EP_TYPE_CONTROL,EP_SINGLE_64);	// init ep0
		_usbConfiguration = 0;			// not configured yet
    16a4:	10 92 5e 02 	sts	0x025E, r1
		UEIENX = 1 << RXSTPE;			// Enable interrupts for ep0
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	80 93 f0 00 	sts	0x00F0, r24
	}

	//	Start of Frame - happens every millisecond so we use it for TX and RX LED one-shot timing, too
	if (udint & (1<<SOFI))
    16ae:	c2 ff       	sbrs	r28, 2
    16b0:	19 c0       	rjmp	.+50     	; 0x16e4 <__vector_10+0x8e>
	{
		USB_Flush(CDC_TX);				// Send a tx frame if found
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	0e 94 21 0b 	call	0x1642	; 0x1642 <_Z9USB_Flushh>
		
		// check whether the one-shot period has elapsed.  if so, turn off the LED
		if (TxLEDPulse && !(--TxLEDPulse))
    16b8:	80 91 60 02 	lds	r24, 0x0260
    16bc:	88 23       	and	r24, r24
    16be:	39 f0       	breq	.+14     	; 0x16ce <__vector_10+0x78>
    16c0:	80 91 60 02 	lds	r24, 0x0260
    16c4:	81 50       	subi	r24, 0x01	; 1
    16c6:	80 93 60 02 	sts	0x0260, r24
    16ca:	88 23       	and	r24, r24
    16cc:	89 f1       	breq	.+98     	; 0x1730 <__vector_10+0xda>
			TXLED0;
		if (RxLEDPulse && !(--RxLEDPulse))
    16ce:	80 91 5f 02 	lds	r24, 0x025F
    16d2:	88 23       	and	r24, r24
    16d4:	39 f0       	breq	.+14     	; 0x16e4 <__vector_10+0x8e>
    16d6:	80 91 5f 02 	lds	r24, 0x025F
    16da:	81 50       	subi	r24, 0x01	; 1
    16dc:	80 93 5f 02 	sts	0x025F, r24
    16e0:	88 23       	and	r24, r24
    16e2:	41 f1       	breq	.+80     	; 0x1734 <__vector_10+0xde>
	}

	// the WAKEUPI interrupt is triggered as soon as there are non-idle patterns on the data
	// lines. Thus, the WAKEUPI interrupt can occur even if the controller is not in the "suspend" mode.
	// Therefore the we enable it only when USB is suspended
	if (udint & (1<<WAKEUPI))
    16e4:	c4 ff       	sbrs	r28, 4
    16e6:	10 c0       	rjmp	.+32     	; 0x1708 <__vector_10+0xb2>
	{
		UDIEN = (UDIEN & ~(1<<WAKEUPE)) | (1<<SUSPE); // Disable interrupts for WAKEUP and enable interrupts for SUSPEND
    16e8:	80 91 e2 00 	lds	r24, 0x00E2
    16ec:	8e 7e       	andi	r24, 0xEE	; 238
    16ee:	81 60       	ori	r24, 0x01	; 1
    16f0:	80 93 e2 00 	sts	0x00E2, r24

		//TODO
		// WAKEUPI shall be cleared by software (USB clock inputs must be enabled before).
		//USB_ClockEnable();
		UDINT &= ~(1<<WAKEUPI);
    16f4:	80 91 e1 00 	lds	r24, 0x00E1
    16f8:	8f 7e       	andi	r24, 0xEF	; 239
    16fa:	80 93 e1 00 	sts	0x00E1, r24
		_usbSuspendState = (_usbSuspendState & ~(1<<SUSPI)) | (1<<WAKEUPI);
    16fe:	80 91 5c 02 	lds	r24, 0x025C
    1702:	8e 7e       	andi	r24, 0xEE	; 238
    1704:	80 61       	ori	r24, 0x10	; 16
    1706:	11 c0       	rjmp	.+34     	; 0x172a <__vector_10+0xd4>
	}
	else if (udint & (1<<SUSPI)) // only one of the WAKEUPI / SUSPI bits can be active at time
    1708:	c0 ff       	sbrs	r28, 0
    170a:	16 c0       	rjmp	.+44     	; 0x1738 <__vector_10+0xe2>
	{
		UDIEN = (UDIEN & ~(1<<SUSPE)) | (1<<WAKEUPE); // Disable interrupts for SUSPEND and enable interrupts for WAKEUP
    170c:	80 91 e2 00 	lds	r24, 0x00E2
    1710:	8e 7e       	andi	r24, 0xEE	; 238
    1712:	80 61       	ori	r24, 0x10	; 16
    1714:	80 93 e2 00 	sts	0x00E2, r24

		//TODO
		//USB_ClockDisable();

		UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear any already pending WAKEUP IRQs and the SUSPI request
    1718:	80 91 e1 00 	lds	r24, 0x00E1
    171c:	8e 7e       	andi	r24, 0xEE	; 238
    171e:	80 93 e1 00 	sts	0x00E1, r24
		_usbSuspendState = (_usbSuspendState & ~(1<<WAKEUPI)) | (1<<SUSPI);
    1722:	80 91 5c 02 	lds	r24, 0x025C
    1726:	8e 7e       	andi	r24, 0xEE	; 238
    1728:	81 60       	ori	r24, 0x01	; 1
    172a:	80 93 5c 02 	sts	0x025C, r24
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <__vector_10+0xe2>
	{
		USB_Flush(CDC_TX);				// Send a tx frame if found
		
		// check whether the one-shot period has elapsed.  if so, turn off the LED
		if (TxLEDPulse && !(--TxLEDPulse))
			TXLED0;
    1730:	5d 9a       	sbi	0x0b, 5	; 11
    1732:	cd cf       	rjmp	.-102    	; 0x16ce <__vector_10+0x78>
		if (RxLEDPulse && !(--RxLEDPulse))
			RXLED0;
    1734:	28 9a       	sbi	0x05, 0	; 5
    1736:	d6 cf       	rjmp	.-84     	; 0x16e4 <__vector_10+0x8e>
		//USB_ClockDisable();

		UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear any already pending WAKEUP IRQs and the SUSPI request
		_usbSuspendState = (_usbSuspendState & ~(1<<WAKEUPI)) | (1<<SUSPI);
	}
}
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	cf 91       	pop	r28
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	7f 91       	pop	r23
    1748:	6f 91       	pop	r22
    174a:	5f 91       	pop	r21
    174c:	4f 91       	pop	r20
    174e:	3f 91       	pop	r19
    1750:	2f 91       	pop	r18
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    175c:	10 92 5e 02 	sts	0x025E, r1
	_usbCurrentStatus = 0;
    1760:	10 92 5d 02 	sts	0x025D, r1
	_usbSuspendState = 0;
    1764:	10 92 5c 02 	sts	0x025C, r1
	USB_ClockEnable();
    1768:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    176c:	80 91 e1 00 	lds	r24, 0x00E1
    1770:	8e 7e       	andi	r24, 0xEE	; 238
    1772:	80 93 e1 00 	sts	0x00E1, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    1776:	8d e0       	ldi	r24, 0x0D	; 13
    1778:	80 93 e2 00 	sts	0x00E2, r24
	
	TX_RX_LED_INIT;
    177c:	55 9a       	sbi	0x0a, 5	; 10
    177e:	20 9a       	sbi	0x04, 0	; 4

#if MAGIC_KEY_POS != (RAMEND-1)
	if (pgm_read_word(FLASHEND - 1) == NEW_LUFA_SIGNATURE) {
    1780:	ee ef       	ldi	r30, 0xFE	; 254
    1782:	ff e7       	ldi	r31, 0x7F	; 127
    1784:	85 91       	lpm	r24, Z+
    1786:	94 91       	lpm	r25, Z
    1788:	8b 3f       	cpi	r24, 0xFB	; 251
    178a:	9c 4d       	sbci	r25, 0xDC	; 220
    178c:	19 f4       	brne	.+6      	; 0x1794 <_ZN10USBDevice_6attachEv+0x38>
		_updatedLUFAbootloader = true;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 55 02 	sts	0x0255, r24
    1794:	08 95       	ret

00001796 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1796:	08 95       	ret

00001798 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1798:	0e 94 92 0c 	call	0x1924	; 0x1924 <init>

	initVariant();
    179c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    17a0:	86 e5       	ldi	r24, 0x56	; 86
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    17a8:	0e 94 2a 01 	call	0x254	; 0x254 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17ac:	c0 e0       	ldi	r28, 0x00	; 0
    17ae:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    17b0:	0e 94 1b 02 	call	0x436	; 0x436 <loop>
		if (serialEventRun) serialEventRun();
    17b4:	20 97       	sbiw	r28, 0x00	; 0
    17b6:	e1 f3       	breq	.-8      	; 0x17b0 <main+0x18>
    17b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    17bc:	f9 cf       	rjmp	.-14     	; 0x17b0 <main+0x18>

000017be <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	2f 93       	push	r18
    17ca:	3f 93       	push	r19
    17cc:	8f 93       	push	r24
    17ce:	9f 93       	push	r25
    17d0:	af 93       	push	r26
    17d2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    17d4:	80 91 62 02 	lds	r24, 0x0262
    17d8:	90 91 63 02 	lds	r25, 0x0263
    17dc:	a0 91 64 02 	lds	r26, 0x0264
    17e0:	b0 91 65 02 	lds	r27, 0x0265
	unsigned char f = timer0_fract;
    17e4:	30 91 61 02 	lds	r19, 0x0261

	m += MILLIS_INC;
	f += FRACT_INC;
    17e8:	23 e0       	ldi	r18, 0x03	; 3
    17ea:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    17ec:	2d 37       	cpi	r18, 0x7D	; 125
    17ee:	20 f4       	brcc	.+8      	; 0x17f8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	a1 1d       	adc	r26, r1
    17f4:	b1 1d       	adc	r27, r1
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    17f8:	26 e8       	ldi	r18, 0x86	; 134
    17fa:	23 0f       	add	r18, r19
		m += 1;
    17fc:	02 96       	adiw	r24, 0x02	; 2
    17fe:	a1 1d       	adc	r26, r1
    1800:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1802:	20 93 61 02 	sts	0x0261, r18
	timer0_millis = m;
    1806:	80 93 62 02 	sts	0x0262, r24
    180a:	90 93 63 02 	sts	0x0263, r25
    180e:	a0 93 64 02 	sts	0x0264, r26
    1812:	b0 93 65 02 	sts	0x0265, r27
	timer0_overflow_count++;
    1816:	80 91 66 02 	lds	r24, 0x0266
    181a:	90 91 67 02 	lds	r25, 0x0267
    181e:	a0 91 68 02 	lds	r26, 0x0268
    1822:	b0 91 69 02 	lds	r27, 0x0269
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	a1 1d       	adc	r26, r1
    182a:	b1 1d       	adc	r27, r1
    182c:	80 93 66 02 	sts	0x0266, r24
    1830:	90 93 67 02 	sts	0x0267, r25
    1834:	a0 93 68 02 	sts	0x0268, r26
    1838:	b0 93 69 02 	sts	0x0269, r27
}
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1852:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1854:	f8 94       	cli
	m = timer0_millis;
    1856:	60 91 62 02 	lds	r22, 0x0262
    185a:	70 91 63 02 	lds	r23, 0x0263
    185e:	80 91 64 02 	lds	r24, 0x0264
    1862:	90 91 65 02 	lds	r25, 0x0265
	SREG = oldSREG;
    1866:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1868:	08 95       	ret

0000186a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    186a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    186c:	f8 94       	cli
	m = timer0_overflow_count;
    186e:	80 91 66 02 	lds	r24, 0x0266
    1872:	90 91 67 02 	lds	r25, 0x0267
    1876:	a0 91 68 02 	lds	r26, 0x0268
    187a:	b0 91 69 02 	lds	r27, 0x0269
#if defined(TCNT0)
	t = TCNT0;
    187e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1880:	a8 9b       	sbis	0x15, 0	; 21
    1882:	05 c0       	rjmp	.+10     	; 0x188e <micros+0x24>
    1884:	2f 3f       	cpi	r18, 0xFF	; 255
    1886:	19 f0       	breq	.+6      	; 0x188e <micros+0x24>
		m++;
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	a1 1d       	adc	r26, r1
    188c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    188e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1890:	66 27       	eor	r22, r22
    1892:	78 2f       	mov	r23, r24
    1894:	89 2f       	mov	r24, r25
    1896:	9a 2f       	mov	r25, r26
    1898:	62 0f       	add	r22, r18
    189a:	71 1d       	adc	r23, r1
    189c:	81 1d       	adc	r24, r1
    189e:	91 1d       	adc	r25, r1
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	66 0f       	add	r22, r22
    18a4:	77 1f       	adc	r23, r23
    18a6:	88 1f       	adc	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	4a 95       	dec	r20
    18ac:	d1 f7       	brne	.-12     	; 0x18a2 <micros+0x38>
}
    18ae:	08 95       	ret

000018b0 <delay>:

void delay(unsigned long ms)
{
    18b0:	8f 92       	push	r8
    18b2:	9f 92       	push	r9
    18b4:	af 92       	push	r10
    18b6:	bf 92       	push	r11
    18b8:	cf 92       	push	r12
    18ba:	df 92       	push	r13
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    18c4:	0e 94 35 0c 	call	0x186a	; 0x186a <micros>
    18c8:	4b 01       	movw	r8, r22
    18ca:	5c 01       	movw	r10, r24

	while (ms > 0) {
    18cc:	c1 14       	cp	r12, r1
    18ce:	d1 04       	cpc	r13, r1
    18d0:	e1 04       	cpc	r14, r1
    18d2:	f1 04       	cpc	r15, r1
    18d4:	f1 f0       	breq	.+60     	; 0x1912 <delay+0x62>
		yield();
    18d6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    18da:	0e 94 35 0c 	call	0x186a	; 0x186a <micros>
    18de:	68 19       	sub	r22, r8
    18e0:	79 09       	sbc	r23, r9
    18e2:	8a 09       	sbc	r24, r10
    18e4:	9b 09       	sbc	r25, r11
    18e6:	68 3e       	cpi	r22, 0xE8	; 232
    18e8:	73 40       	sbci	r23, 0x03	; 3
    18ea:	81 05       	cpc	r24, r1
    18ec:	91 05       	cpc	r25, r1
    18ee:	70 f3       	brcs	.-36     	; 0x18cc <delay+0x1c>
			ms--;
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	c2 1a       	sub	r12, r18
    18f4:	d1 08       	sbc	r13, r1
    18f6:	e1 08       	sbc	r14, r1
    18f8:	f1 08       	sbc	r15, r1
			start += 1000;
    18fa:	88 ee       	ldi	r24, 0xE8	; 232
    18fc:	88 0e       	add	r8, r24
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	98 1e       	adc	r9, r24
    1902:	a1 1c       	adc	r10, r1
    1904:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1906:	c1 14       	cp	r12, r1
    1908:	d1 04       	cpc	r13, r1
    190a:	e1 04       	cpc	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	29 f7       	brne	.-54     	; 0x18da <delay+0x2a>
    1910:	dd cf       	rjmp	.-70     	; 0x18cc <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	df 90       	pop	r13
    1918:	cf 90       	pop	r12
    191a:	bf 90       	pop	r11
    191c:	af 90       	pop	r10
    191e:	9f 90       	pop	r9
    1920:	8f 90       	pop	r8
    1922:	08 95       	ret

00001924 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1924:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1926:	84 b5       	in	r24, 0x24	; 36
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    192c:	84 b5       	in	r24, 0x24	; 36
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1932:	85 b5       	in	r24, 0x25	; 37
    1934:	82 60       	ori	r24, 0x02	; 2
    1936:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	81 60       	ori	r24, 0x01	; 1
    193c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    193e:	ee e6       	ldi	r30, 0x6E	; 110
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	81 60       	ori	r24, 0x01	; 1
    1946:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1948:	e1 e8       	ldi	r30, 0x81	; 129
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    194e:	80 81       	ld	r24, Z
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    195a:	e0 e8       	ldi	r30, 0x80	; 128
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	81 60       	ori	r24, 0x01	; 1
    1962:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1964:	e1 e9       	ldi	r30, 0x91	; 145
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	82 60       	ori	r24, 0x02	; 2
    196c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    196e:	80 81       	ld	r24, Z
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1974:	e0 e9       	ldi	r30, 0x90	; 144
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	81 60       	ori	r24, 0x01	; 1
    197c:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    197e:	e1 ec       	ldi	r30, 0xC1	; 193
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	84 60       	ori	r24, 0x04	; 4
    1986:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    1988:	80 81       	ld	r24, Z
    198a:	82 60       	ori	r24, 0x02	; 2
    198c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    198e:	80 81       	ld	r24, Z
    1990:	81 60       	ori	r24, 0x01	; 1
    1992:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    1994:	e3 ec       	ldi	r30, 0xC3	; 195
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	81 60       	ori	r24, 0x01	; 1
    199c:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    199e:	e0 ec       	ldi	r30, 0xC0	; 192
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	82 60       	ori	r24, 0x02	; 2
    19a6:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    19a8:	e2 ec       	ldi	r30, 0xC2	; 194
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    19b2:	ea e7       	ldi	r30, 0x7A	; 122
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    19bc:	80 81       	ld	r24, Z
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    19c2:	80 81       	ld	r24, Z
    19c4:	81 60       	ori	r24, 0x01	; 1
    19c6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19c8:	80 81       	ld	r24, Z
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	80 83       	st	Z, r24
    19ce:	08 95       	ret

000019d0 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	7b 01       	movw	r14, r22
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    19de:	fc 01       	movw	r30, r24
    19e0:	c2 81       	ldd	r28, Z+2	; 0x02
    19e2:	d3 81       	ldd	r29, Z+3	; 0x03

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
    19e4:	00 e0       	ldi	r16, 0x00	; 0
    19e6:	10 e0       	ldi	r17, 0x00	; 0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    19e8:	20 97       	sbiw	r28, 0x00	; 0
    19ea:	81 f0       	breq	.+32     	; 0x1a0c <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
		int res = node->getInterface(interfaceCount);
    19ec:	e8 81       	ld	r30, Y
    19ee:	f9 81       	ldd	r31, Y+1	; 0x01
    19f0:	02 80       	ldd	r0, Z+2	; 0x02
    19f2:	f3 81       	ldd	r31, Z+3	; 0x03
    19f4:	e0 2d       	mov	r30, r0
    19f6:	b7 01       	movw	r22, r14
    19f8:	ce 01       	movw	r24, r28
    19fa:	09 95       	icall
		if (res < 0)
    19fc:	97 fd       	sbrc	r25, 7
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
			return -1;
		sent += res;
    1a00:	08 0f       	add	r16, r24
    1a02:	19 1f       	adc	r17, r25

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1a04:	08 84       	ldd	r0, Y+8	; 0x08
    1a06:	d9 85       	ldd	r29, Y+9	; 0x09
    1a08:	c0 2d       	mov	r28, r0
    1a0a:	ee cf       	rjmp	.-36     	; 0x19e8 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
		sent += res;
	}
	return sent;
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	08 95       	ret

00001a22 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	c2 81       	ldd	r28, Z+2	; 0x02
    1a30:	d3 81       	ldd	r29, Z+3	; 0x03
    1a32:	20 97       	sbiw	r28, 0x00	; 0
    1a34:	71 f0       	breq	.+28     	; 0x1a52 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
		int ret = node->getDescriptor(setup);
    1a36:	e8 81       	ld	r30, Y
    1a38:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3a:	04 80       	ldd	r0, Z+4	; 0x04
    1a3c:	f5 81       	ldd	r31, Z+5	; 0x05
    1a3e:	e0 2d       	mov	r30, r0
    1a40:	b8 01       	movw	r22, r16
    1a42:	ce 01       	movw	r24, r28
    1a44:	09 95       	icall
		// ret!=0 -> request has been processed
		if (ret)
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1a4a:	08 84       	ldd	r0, Y+8	; 0x08
    1a4c:	d9 85       	ldd	r29, Y+9	; 0x09
    1a4e:	c0 2d       	mov	r28, r0
    1a50:	f0 cf       	rjmp	.-32     	; 0x1a32 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
}
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	08 95       	ret

00001a60 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	c2 81       	ldd	r28, Z+2	; 0x02
    1a6e:	d3 81       	ldd	r29, Z+3	; 0x03
    1a70:	20 97       	sbiw	r28, 0x00	; 0
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
		iSerialNum += node->getShortName(iSerialNum);
    1a74:	e8 81       	ld	r30, Y
    1a76:	f9 81       	ldd	r31, Y+1	; 0x01
    1a78:	06 80       	ldd	r0, Z+6	; 0x06
    1a7a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	b8 01       	movw	r22, r16
    1a80:	ce 01       	movw	r24, r28
    1a82:	09 95       	icall
    1a84:	08 0f       	add	r16, r24
    1a86:	11 1d       	adc	r17, r1
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1a88:	08 84       	ldd	r0, Y+8	; 0x08
    1a8a:	d9 85       	ldd	r29, Y+9	; 0x09
    1a8c:	c0 2d       	mov	r28, r0
    1a8e:	f0 cf       	rjmp	.-32     	; 0x1a70 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
		iSerialNum += node->getShortName(iSerialNum);
	}
	*iSerialNum = 0;
    1a90:	f8 01       	movw	r30, r16
    1a92:	10 82       	st	Z, r1
}
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	c2 81       	ldd	r28, Z+2	; 0x02
    1aac:	d3 81       	ldd	r29, Z+3	; 0x03
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	71 f0       	breq	.+28     	; 0x1ace <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
		if (node->setup(setup)) {
    1ab2:	e8 81       	ld	r30, Y
    1ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab6:	01 90       	ld	r0, Z+
    1ab8:	f0 81       	ld	r31, Z
    1aba:	e0 2d       	mov	r30, r0
    1abc:	b8 01       	movw	r22, r16
    1abe:	ce 01       	movw	r24, r28
    1ac0:	09 95       	icall
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	06 c0       	rjmp	.+12     	; 0x1ad2 <_ZN13PluggableUSB_5setupER8USBSetup+0x34>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1ac6:	08 84       	ldd	r0, Y+8	; 0x08
    1ac8:	d9 85       	ldd	r29, Y+9	; 0x09
    1aca:	c0 2d       	mov	r28, r0
    1acc:	f0 cf       	rjmp	.-32     	; 0x1aae <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <_ZN13PluggableUSB_5setupER8USBSetup+0x36>
bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
		if (node->setup(setup)) {
			return true;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1ade:	80 91 6e 02 	lds	r24, 0x026E
    1ae2:	81 11       	cpse	r24, r1
    1ae4:	0d c0       	rjmp	.+26     	; 0x1b00 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	80 93 6a 02 	sts	0x026A, r24
    1aec:	84 e0       	ldi	r24, 0x04	; 4
    1aee:	80 93 6b 02 	sts	0x026B, r24
    1af2:	10 92 6d 02 	sts	0x026D, r1
    1af6:	10 92 6c 02 	sts	0x026C, r1
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 6e 02 	sts	0x026E, r24
	return obj;
}
    1b00:	8a e6       	ldi	r24, 0x6A	; 106
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	08 95       	ret

00001b06 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b06:	08 95       	ret

00001b08 <__subsf3>:
    1b08:	50 58       	subi	r21, 0x80	; 128

00001b0a <__addsf3>:
    1b0a:	bb 27       	eor	r27, r27
    1b0c:	aa 27       	eor	r26, r26
    1b0e:	0e d0       	rcall	.+28     	; 0x1b2c <__addsf3x>
    1b10:	75 c1       	rjmp	.+746    	; 0x1dfc <__fp_round>
    1b12:	66 d1       	rcall	.+716    	; 0x1de0 <__fp_pscA>
    1b14:	30 f0       	brcs	.+12     	; 0x1b22 <__addsf3+0x18>
    1b16:	6b d1       	rcall	.+726    	; 0x1dee <__fp_pscB>
    1b18:	20 f0       	brcs	.+8      	; 0x1b22 <__addsf3+0x18>
    1b1a:	31 f4       	brne	.+12     	; 0x1b28 <__addsf3+0x1e>
    1b1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <__addsf3+0x1a>
    1b20:	1e f4       	brtc	.+6      	; 0x1b28 <__addsf3+0x1e>
    1b22:	5b c1       	rjmp	.+694    	; 0x1dda <__fp_nan>
    1b24:	0e f4       	brtc	.+2      	; 0x1b28 <__addsf3+0x1e>
    1b26:	e0 95       	com	r30
    1b28:	e7 fb       	bst	r30, 7
    1b2a:	51 c1       	rjmp	.+674    	; 0x1dce <__fp_inf>

00001b2c <__addsf3x>:
    1b2c:	e9 2f       	mov	r30, r25
    1b2e:	77 d1       	rcall	.+750    	; 0x1e1e <__fp_split3>
    1b30:	80 f3       	brcs	.-32     	; 0x1b12 <__addsf3+0x8>
    1b32:	ba 17       	cp	r27, r26
    1b34:	62 07       	cpc	r22, r18
    1b36:	73 07       	cpc	r23, r19
    1b38:	84 07       	cpc	r24, r20
    1b3a:	95 07       	cpc	r25, r21
    1b3c:	18 f0       	brcs	.+6      	; 0x1b44 <__addsf3x+0x18>
    1b3e:	71 f4       	brne	.+28     	; 0x1b5c <__addsf3x+0x30>
    1b40:	9e f5       	brtc	.+102    	; 0x1ba8 <__addsf3x+0x7c>
    1b42:	8f c1       	rjmp	.+798    	; 0x1e62 <__fp_zero>
    1b44:	0e f4       	brtc	.+2      	; 0x1b48 <__addsf3x+0x1c>
    1b46:	e0 95       	com	r30
    1b48:	0b 2e       	mov	r0, r27
    1b4a:	ba 2f       	mov	r27, r26
    1b4c:	a0 2d       	mov	r26, r0
    1b4e:	0b 01       	movw	r0, r22
    1b50:	b9 01       	movw	r22, r18
    1b52:	90 01       	movw	r18, r0
    1b54:	0c 01       	movw	r0, r24
    1b56:	ca 01       	movw	r24, r20
    1b58:	a0 01       	movw	r20, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	ff 27       	eor	r31, r31
    1b5e:	59 1b       	sub	r21, r25
    1b60:	99 f0       	breq	.+38     	; 0x1b88 <__addsf3x+0x5c>
    1b62:	59 3f       	cpi	r21, 0xF9	; 249
    1b64:	50 f4       	brcc	.+20     	; 0x1b7a <__addsf3x+0x4e>
    1b66:	50 3e       	cpi	r21, 0xE0	; 224
    1b68:	68 f1       	brcs	.+90     	; 0x1bc4 <__addsf3x+0x98>
    1b6a:	1a 16       	cp	r1, r26
    1b6c:	f0 40       	sbci	r31, 0x00	; 0
    1b6e:	a2 2f       	mov	r26, r18
    1b70:	23 2f       	mov	r18, r19
    1b72:	34 2f       	mov	r19, r20
    1b74:	44 27       	eor	r20, r20
    1b76:	58 5f       	subi	r21, 0xF8	; 248
    1b78:	f3 cf       	rjmp	.-26     	; 0x1b60 <__addsf3x+0x34>
    1b7a:	46 95       	lsr	r20
    1b7c:	37 95       	ror	r19
    1b7e:	27 95       	ror	r18
    1b80:	a7 95       	ror	r26
    1b82:	f0 40       	sbci	r31, 0x00	; 0
    1b84:	53 95       	inc	r21
    1b86:	c9 f7       	brne	.-14     	; 0x1b7a <__addsf3x+0x4e>
    1b88:	7e f4       	brtc	.+30     	; 0x1ba8 <__addsf3x+0x7c>
    1b8a:	1f 16       	cp	r1, r31
    1b8c:	ba 0b       	sbc	r27, r26
    1b8e:	62 0b       	sbc	r22, r18
    1b90:	73 0b       	sbc	r23, r19
    1b92:	84 0b       	sbc	r24, r20
    1b94:	ba f0       	brmi	.+46     	; 0x1bc4 <__addsf3x+0x98>
    1b96:	91 50       	subi	r25, 0x01	; 1
    1b98:	a1 f0       	breq	.+40     	; 0x1bc2 <__addsf3x+0x96>
    1b9a:	ff 0f       	add	r31, r31
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	c2 f7       	brpl	.-16     	; 0x1b96 <__addsf3x+0x6a>
    1ba6:	0e c0       	rjmp	.+28     	; 0x1bc4 <__addsf3x+0x98>
    1ba8:	ba 0f       	add	r27, r26
    1baa:	62 1f       	adc	r22, r18
    1bac:	73 1f       	adc	r23, r19
    1bae:	84 1f       	adc	r24, r20
    1bb0:	48 f4       	brcc	.+18     	; 0x1bc4 <__addsf3x+0x98>
    1bb2:	87 95       	ror	r24
    1bb4:	77 95       	ror	r23
    1bb6:	67 95       	ror	r22
    1bb8:	b7 95       	ror	r27
    1bba:	f7 95       	ror	r31
    1bbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1bbe:	08 f0       	brcs	.+2      	; 0x1bc2 <__addsf3x+0x96>
    1bc0:	b3 cf       	rjmp	.-154    	; 0x1b28 <__addsf3+0x1e>
    1bc2:	93 95       	inc	r25
    1bc4:	88 0f       	add	r24, r24
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <__addsf3x+0x9e>
    1bc8:	99 27       	eor	r25, r25
    1bca:	ee 0f       	add	r30, r30
    1bcc:	97 95       	ror	r25
    1bce:	87 95       	ror	r24
    1bd0:	08 95       	ret

00001bd2 <__cmpsf2>:
    1bd2:	d9 d0       	rcall	.+434    	; 0x1d86 <__fp_cmp>
    1bd4:	08 f4       	brcc	.+2      	; 0x1bd8 <__cmpsf2+0x6>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	08 95       	ret

00001bda <__divsf3>:
    1bda:	0c d0       	rcall	.+24     	; 0x1bf4 <__divsf3x>
    1bdc:	0f c1       	rjmp	.+542    	; 0x1dfc <__fp_round>
    1bde:	07 d1       	rcall	.+526    	; 0x1dee <__fp_pscB>
    1be0:	40 f0       	brcs	.+16     	; 0x1bf2 <__divsf3+0x18>
    1be2:	fe d0       	rcall	.+508    	; 0x1de0 <__fp_pscA>
    1be4:	30 f0       	brcs	.+12     	; 0x1bf2 <__divsf3+0x18>
    1be6:	21 f4       	brne	.+8      	; 0x1bf0 <__divsf3+0x16>
    1be8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bea:	19 f0       	breq	.+6      	; 0x1bf2 <__divsf3+0x18>
    1bec:	f0 c0       	rjmp	.+480    	; 0x1dce <__fp_inf>
    1bee:	51 11       	cpse	r21, r1
    1bf0:	39 c1       	rjmp	.+626    	; 0x1e64 <__fp_szero>
    1bf2:	f3 c0       	rjmp	.+486    	; 0x1dda <__fp_nan>

00001bf4 <__divsf3x>:
    1bf4:	14 d1       	rcall	.+552    	; 0x1e1e <__fp_split3>
    1bf6:	98 f3       	brcs	.-26     	; 0x1bde <__divsf3+0x4>

00001bf8 <__divsf3_pse>:
    1bf8:	99 23       	and	r25, r25
    1bfa:	c9 f3       	breq	.-14     	; 0x1bee <__divsf3+0x14>
    1bfc:	55 23       	and	r21, r21
    1bfe:	b1 f3       	breq	.-20     	; 0x1bec <__divsf3+0x12>
    1c00:	95 1b       	sub	r25, r21
    1c02:	55 0b       	sbc	r21, r21
    1c04:	bb 27       	eor	r27, r27
    1c06:	aa 27       	eor	r26, r26
    1c08:	62 17       	cp	r22, r18
    1c0a:	73 07       	cpc	r23, r19
    1c0c:	84 07       	cpc	r24, r20
    1c0e:	38 f0       	brcs	.+14     	; 0x1c1e <__divsf3_pse+0x26>
    1c10:	9f 5f       	subi	r25, 0xFF	; 255
    1c12:	5f 4f       	sbci	r21, 0xFF	; 255
    1c14:	22 0f       	add	r18, r18
    1c16:	33 1f       	adc	r19, r19
    1c18:	44 1f       	adc	r20, r20
    1c1a:	aa 1f       	adc	r26, r26
    1c1c:	a9 f3       	breq	.-22     	; 0x1c08 <__divsf3_pse+0x10>
    1c1e:	33 d0       	rcall	.+102    	; 0x1c86 <__divsf3_pse+0x8e>
    1c20:	0e 2e       	mov	r0, r30
    1c22:	3a f0       	brmi	.+14     	; 0x1c32 <__divsf3_pse+0x3a>
    1c24:	e0 e8       	ldi	r30, 0x80	; 128
    1c26:	30 d0       	rcall	.+96     	; 0x1c88 <__divsf3_pse+0x90>
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	50 40       	sbci	r21, 0x00	; 0
    1c2c:	e6 95       	lsr	r30
    1c2e:	00 1c       	adc	r0, r0
    1c30:	ca f7       	brpl	.-14     	; 0x1c24 <__divsf3_pse+0x2c>
    1c32:	29 d0       	rcall	.+82     	; 0x1c86 <__divsf3_pse+0x8e>
    1c34:	fe 2f       	mov	r31, r30
    1c36:	27 d0       	rcall	.+78     	; 0x1c86 <__divsf3_pse+0x8e>
    1c38:	66 0f       	add	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	88 1f       	adc	r24, r24
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	26 17       	cp	r18, r22
    1c42:	37 07       	cpc	r19, r23
    1c44:	48 07       	cpc	r20, r24
    1c46:	ab 07       	cpc	r26, r27
    1c48:	b0 e8       	ldi	r27, 0x80	; 128
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <__divsf3_pse+0x56>
    1c4c:	bb 0b       	sbc	r27, r27
    1c4e:	80 2d       	mov	r24, r0
    1c50:	bf 01       	movw	r22, r30
    1c52:	ff 27       	eor	r31, r31
    1c54:	93 58       	subi	r25, 0x83	; 131
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	2a f0       	brmi	.+10     	; 0x1c64 <__divsf3_pse+0x6c>
    1c5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	68 f0       	brcs	.+26     	; 0x1c7a <__divsf3_pse+0x82>
    1c60:	b6 c0       	rjmp	.+364    	; 0x1dce <__fp_inf>
    1c62:	00 c1       	rjmp	.+512    	; 0x1e64 <__fp_szero>
    1c64:	5f 3f       	cpi	r21, 0xFF	; 255
    1c66:	ec f3       	brlt	.-6      	; 0x1c62 <__divsf3_pse+0x6a>
    1c68:	98 3e       	cpi	r25, 0xE8	; 232
    1c6a:	dc f3       	brlt	.-10     	; 0x1c62 <__divsf3_pse+0x6a>
    1c6c:	86 95       	lsr	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	b7 95       	ror	r27
    1c74:	f7 95       	ror	r31
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	c9 f7       	brne	.-14     	; 0x1c6c <__divsf3_pse+0x74>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	91 1d       	adc	r25, r1
    1c7e:	96 95       	lsr	r25
    1c80:	87 95       	ror	r24
    1c82:	97 f9       	bld	r25, 7
    1c84:	08 95       	ret
    1c86:	e1 e0       	ldi	r30, 0x01	; 1
    1c88:	66 0f       	add	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	62 17       	cp	r22, r18
    1c92:	73 07       	cpc	r23, r19
    1c94:	84 07       	cpc	r24, r20
    1c96:	ba 07       	cpc	r27, r26
    1c98:	20 f0       	brcs	.+8      	; 0x1ca2 <__divsf3_pse+0xaa>
    1c9a:	62 1b       	sub	r22, r18
    1c9c:	73 0b       	sbc	r23, r19
    1c9e:	84 0b       	sbc	r24, r20
    1ca0:	ba 0b       	sbc	r27, r26
    1ca2:	ee 1f       	adc	r30, r30
    1ca4:	88 f7       	brcc	.-30     	; 0x1c88 <__divsf3_pse+0x90>
    1ca6:	e0 95       	com	r30
    1ca8:	08 95       	ret

00001caa <__fixsfsi>:
    1caa:	04 d0       	rcall	.+8      	; 0x1cb4 <__fixunssfsi>
    1cac:	68 94       	set
    1cae:	b1 11       	cpse	r27, r1
    1cb0:	d9 c0       	rjmp	.+434    	; 0x1e64 <__fp_szero>
    1cb2:	08 95       	ret

00001cb4 <__fixunssfsi>:
    1cb4:	bc d0       	rcall	.+376    	; 0x1e2e <__fp_splitA>
    1cb6:	88 f0       	brcs	.+34     	; 0x1cda <__fixunssfsi+0x26>
    1cb8:	9f 57       	subi	r25, 0x7F	; 127
    1cba:	90 f0       	brcs	.+36     	; 0x1ce0 <__fixunssfsi+0x2c>
    1cbc:	b9 2f       	mov	r27, r25
    1cbe:	99 27       	eor	r25, r25
    1cc0:	b7 51       	subi	r27, 0x17	; 23
    1cc2:	a0 f0       	brcs	.+40     	; 0x1cec <__fixunssfsi+0x38>
    1cc4:	d1 f0       	breq	.+52     	; 0x1cfa <__fixunssfsi+0x46>
    1cc6:	66 0f       	add	r22, r22
    1cc8:	77 1f       	adc	r23, r23
    1cca:	88 1f       	adc	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	1a f0       	brmi	.+6      	; 0x1cd6 <__fixunssfsi+0x22>
    1cd0:	ba 95       	dec	r27
    1cd2:	c9 f7       	brne	.-14     	; 0x1cc6 <__fixunssfsi+0x12>
    1cd4:	12 c0       	rjmp	.+36     	; 0x1cfa <__fixunssfsi+0x46>
    1cd6:	b1 30       	cpi	r27, 0x01	; 1
    1cd8:	81 f0       	breq	.+32     	; 0x1cfa <__fixunssfsi+0x46>
    1cda:	c3 d0       	rcall	.+390    	; 0x1e62 <__fp_zero>
    1cdc:	b1 e0       	ldi	r27, 0x01	; 1
    1cde:	08 95       	ret
    1ce0:	c0 c0       	rjmp	.+384    	; 0x1e62 <__fp_zero>
    1ce2:	67 2f       	mov	r22, r23
    1ce4:	78 2f       	mov	r23, r24
    1ce6:	88 27       	eor	r24, r24
    1ce8:	b8 5f       	subi	r27, 0xF8	; 248
    1cea:	39 f0       	breq	.+14     	; 0x1cfa <__fixunssfsi+0x46>
    1cec:	b9 3f       	cpi	r27, 0xF9	; 249
    1cee:	cc f3       	brlt	.-14     	; 0x1ce2 <__fixunssfsi+0x2e>
    1cf0:	86 95       	lsr	r24
    1cf2:	77 95       	ror	r23
    1cf4:	67 95       	ror	r22
    1cf6:	b3 95       	inc	r27
    1cf8:	d9 f7       	brne	.-10     	; 0x1cf0 <__fixunssfsi+0x3c>
    1cfa:	3e f4       	brtc	.+14     	; 0x1d0a <__fixunssfsi+0x56>
    1cfc:	90 95       	com	r25
    1cfe:	80 95       	com	r24
    1d00:	70 95       	com	r23
    1d02:	61 95       	neg	r22
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f 4f       	sbci	r24, 0xFF	; 255
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	08 95       	ret

00001d0c <__floatunsisf>:
    1d0c:	e8 94       	clt
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <__floatsisf+0x12>

00001d10 <__floatsisf>:
    1d10:	97 fb       	bst	r25, 7
    1d12:	3e f4       	brtc	.+14     	; 0x1d22 <__floatsisf+0x12>
    1d14:	90 95       	com	r25
    1d16:	80 95       	com	r24
    1d18:	70 95       	com	r23
    1d1a:	61 95       	neg	r22
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	99 23       	and	r25, r25
    1d24:	a9 f0       	breq	.+42     	; 0x1d50 <__floatsisf+0x40>
    1d26:	f9 2f       	mov	r31, r25
    1d28:	96 e9       	ldi	r25, 0x96	; 150
    1d2a:	bb 27       	eor	r27, r27
    1d2c:	93 95       	inc	r25
    1d2e:	f6 95       	lsr	r31
    1d30:	87 95       	ror	r24
    1d32:	77 95       	ror	r23
    1d34:	67 95       	ror	r22
    1d36:	b7 95       	ror	r27
    1d38:	f1 11       	cpse	r31, r1
    1d3a:	f8 cf       	rjmp	.-16     	; 0x1d2c <__floatsisf+0x1c>
    1d3c:	fa f4       	brpl	.+62     	; 0x1d7c <__floatsisf+0x6c>
    1d3e:	bb 0f       	add	r27, r27
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__floatsisf+0x36>
    1d42:	60 ff       	sbrs	r22, 0
    1d44:	1b c0       	rjmp	.+54     	; 0x1d7c <__floatsisf+0x6c>
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	16 c0       	rjmp	.+44     	; 0x1d7c <__floatsisf+0x6c>
    1d50:	88 23       	and	r24, r24
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <__floatsisf+0x48>
    1d54:	96 e9       	ldi	r25, 0x96	; 150
    1d56:	11 c0       	rjmp	.+34     	; 0x1d7a <__floatsisf+0x6a>
    1d58:	77 23       	and	r23, r23
    1d5a:	21 f0       	breq	.+8      	; 0x1d64 <__floatsisf+0x54>
    1d5c:	9e e8       	ldi	r25, 0x8E	; 142
    1d5e:	87 2f       	mov	r24, r23
    1d60:	76 2f       	mov	r23, r22
    1d62:	05 c0       	rjmp	.+10     	; 0x1d6e <__floatsisf+0x5e>
    1d64:	66 23       	and	r22, r22
    1d66:	71 f0       	breq	.+28     	; 0x1d84 <__floatsisf+0x74>
    1d68:	96 e8       	ldi	r25, 0x86	; 134
    1d6a:	86 2f       	mov	r24, r22
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	2a f0       	brmi	.+10     	; 0x1d7c <__floatsisf+0x6c>
    1d72:	9a 95       	dec	r25
    1d74:	66 0f       	add	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	88 1f       	adc	r24, r24
    1d7a:	da f7       	brpl	.-10     	; 0x1d72 <__floatsisf+0x62>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	97 f9       	bld	r25, 7
    1d84:	08 95       	ret

00001d86 <__fp_cmp>:
    1d86:	99 0f       	add	r25, r25
    1d88:	00 08       	sbc	r0, r0
    1d8a:	55 0f       	add	r21, r21
    1d8c:	aa 0b       	sbc	r26, r26
    1d8e:	e0 e8       	ldi	r30, 0x80	; 128
    1d90:	fe ef       	ldi	r31, 0xFE	; 254
    1d92:	16 16       	cp	r1, r22
    1d94:	17 06       	cpc	r1, r23
    1d96:	e8 07       	cpc	r30, r24
    1d98:	f9 07       	cpc	r31, r25
    1d9a:	c0 f0       	brcs	.+48     	; 0x1dcc <__fp_cmp+0x46>
    1d9c:	12 16       	cp	r1, r18
    1d9e:	13 06       	cpc	r1, r19
    1da0:	e4 07       	cpc	r30, r20
    1da2:	f5 07       	cpc	r31, r21
    1da4:	98 f0       	brcs	.+38     	; 0x1dcc <__fp_cmp+0x46>
    1da6:	62 1b       	sub	r22, r18
    1da8:	73 0b       	sbc	r23, r19
    1daa:	84 0b       	sbc	r24, r20
    1dac:	95 0b       	sbc	r25, r21
    1dae:	39 f4       	brne	.+14     	; 0x1dbe <__fp_cmp+0x38>
    1db0:	0a 26       	eor	r0, r26
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <__fp_cmp+0x46>
    1db4:	23 2b       	or	r18, r19
    1db6:	24 2b       	or	r18, r20
    1db8:	25 2b       	or	r18, r21
    1dba:	21 f4       	brne	.+8      	; 0x1dc4 <__fp_cmp+0x3e>
    1dbc:	08 95       	ret
    1dbe:	0a 26       	eor	r0, r26
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <__fp_cmp+0x3e>
    1dc2:	a1 40       	sbci	r26, 0x01	; 1
    1dc4:	a6 95       	lsr	r26
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	81 1d       	adc	r24, r1
    1dca:	81 1d       	adc	r24, r1
    1dcc:	08 95       	ret

00001dce <__fp_inf>:
    1dce:	97 f9       	bld	r25, 7
    1dd0:	9f 67       	ori	r25, 0x7F	; 127
    1dd2:	80 e8       	ldi	r24, 0x80	; 128
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	08 95       	ret

00001dda <__fp_nan>:
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	80 ec       	ldi	r24, 0xC0	; 192
    1dde:	08 95       	ret

00001de0 <__fp_pscA>:
    1de0:	00 24       	eor	r0, r0
    1de2:	0a 94       	dec	r0
    1de4:	16 16       	cp	r1, r22
    1de6:	17 06       	cpc	r1, r23
    1de8:	18 06       	cpc	r1, r24
    1dea:	09 06       	cpc	r0, r25
    1dec:	08 95       	ret

00001dee <__fp_pscB>:
    1dee:	00 24       	eor	r0, r0
    1df0:	0a 94       	dec	r0
    1df2:	12 16       	cp	r1, r18
    1df4:	13 06       	cpc	r1, r19
    1df6:	14 06       	cpc	r1, r20
    1df8:	05 06       	cpc	r0, r21
    1dfa:	08 95       	ret

00001dfc <__fp_round>:
    1dfc:	09 2e       	mov	r0, r25
    1dfe:	03 94       	inc	r0
    1e00:	00 0c       	add	r0, r0
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <__fp_round+0xc>
    1e04:	88 23       	and	r24, r24
    1e06:	52 f0       	brmi	.+20     	; 0x1e1c <__fp_round+0x20>
    1e08:	bb 0f       	add	r27, r27
    1e0a:	40 f4       	brcc	.+16     	; 0x1e1c <__fp_round+0x20>
    1e0c:	bf 2b       	or	r27, r31
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <__fp_round+0x18>
    1e10:	60 ff       	sbrs	r22, 0
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <__fp_round+0x20>
    1e14:	6f 5f       	subi	r22, 0xFF	; 255
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	08 95       	ret

00001e1e <__fp_split3>:
    1e1e:	57 fd       	sbrc	r21, 7
    1e20:	90 58       	subi	r25, 0x80	; 128
    1e22:	44 0f       	add	r20, r20
    1e24:	55 1f       	adc	r21, r21
    1e26:	59 f0       	breq	.+22     	; 0x1e3e <__fp_splitA+0x10>
    1e28:	5f 3f       	cpi	r21, 0xFF	; 255
    1e2a:	71 f0       	breq	.+28     	; 0x1e48 <__fp_splitA+0x1a>
    1e2c:	47 95       	ror	r20

00001e2e <__fp_splitA>:
    1e2e:	88 0f       	add	r24, r24
    1e30:	97 fb       	bst	r25, 7
    1e32:	99 1f       	adc	r25, r25
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <__fp_splitA+0x20>
    1e36:	9f 3f       	cpi	r25, 0xFF	; 255
    1e38:	79 f0       	breq	.+30     	; 0x1e58 <__fp_splitA+0x2a>
    1e3a:	87 95       	ror	r24
    1e3c:	08 95       	ret
    1e3e:	12 16       	cp	r1, r18
    1e40:	13 06       	cpc	r1, r19
    1e42:	14 06       	cpc	r1, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	f2 cf       	rjmp	.-28     	; 0x1e2c <__fp_split3+0xe>
    1e48:	46 95       	lsr	r20
    1e4a:	f1 df       	rcall	.-30     	; 0x1e2e <__fp_splitA>
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <__fp_splitA+0x30>
    1e4e:	16 16       	cp	r1, r22
    1e50:	17 06       	cpc	r1, r23
    1e52:	18 06       	cpc	r1, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	f1 cf       	rjmp	.-30     	; 0x1e3a <__fp_splitA+0xc>
    1e58:	86 95       	lsr	r24
    1e5a:	71 05       	cpc	r23, r1
    1e5c:	61 05       	cpc	r22, r1
    1e5e:	08 94       	sec
    1e60:	08 95       	ret

00001e62 <__fp_zero>:
    1e62:	e8 94       	clt

00001e64 <__fp_szero>:
    1e64:	bb 27       	eor	r27, r27
    1e66:	66 27       	eor	r22, r22
    1e68:	77 27       	eor	r23, r23
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	97 f9       	bld	r25, 7
    1e6e:	08 95       	ret

00001e70 <__gesf2>:
    1e70:	8a df       	rcall	.-236    	; 0x1d86 <__fp_cmp>
    1e72:	08 f4       	brcc	.+2      	; 0x1e76 <__gesf2+0x6>
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	08 95       	ret

00001e78 <__mulsf3>:
    1e78:	0b d0       	rcall	.+22     	; 0x1e90 <__mulsf3x>
    1e7a:	c0 cf       	rjmp	.-128    	; 0x1dfc <__fp_round>
    1e7c:	b1 df       	rcall	.-158    	; 0x1de0 <__fp_pscA>
    1e7e:	28 f0       	brcs	.+10     	; 0x1e8a <__mulsf3+0x12>
    1e80:	b6 df       	rcall	.-148    	; 0x1dee <__fp_pscB>
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <__mulsf3+0x12>
    1e84:	95 23       	and	r25, r21
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <__mulsf3+0x12>
    1e88:	a2 cf       	rjmp	.-188    	; 0x1dce <__fp_inf>
    1e8a:	a7 cf       	rjmp	.-178    	; 0x1dda <__fp_nan>
    1e8c:	11 24       	eor	r1, r1
    1e8e:	ea cf       	rjmp	.-44     	; 0x1e64 <__fp_szero>

00001e90 <__mulsf3x>:
    1e90:	c6 df       	rcall	.-116    	; 0x1e1e <__fp_split3>
    1e92:	a0 f3       	brcs	.-24     	; 0x1e7c <__mulsf3+0x4>

00001e94 <__mulsf3_pse>:
    1e94:	95 9f       	mul	r25, r21
    1e96:	d1 f3       	breq	.-12     	; 0x1e8c <__mulsf3+0x14>
    1e98:	95 0f       	add	r25, r21
    1e9a:	50 e0       	ldi	r21, 0x00	; 0
    1e9c:	55 1f       	adc	r21, r21
    1e9e:	62 9f       	mul	r22, r18
    1ea0:	f0 01       	movw	r30, r0
    1ea2:	72 9f       	mul	r23, r18
    1ea4:	bb 27       	eor	r27, r27
    1ea6:	f0 0d       	add	r31, r0
    1ea8:	b1 1d       	adc	r27, r1
    1eaa:	63 9f       	mul	r22, r19
    1eac:	aa 27       	eor	r26, r26
    1eae:	f0 0d       	add	r31, r0
    1eb0:	b1 1d       	adc	r27, r1
    1eb2:	aa 1f       	adc	r26, r26
    1eb4:	64 9f       	mul	r22, r20
    1eb6:	66 27       	eor	r22, r22
    1eb8:	b0 0d       	add	r27, r0
    1eba:	a1 1d       	adc	r26, r1
    1ebc:	66 1f       	adc	r22, r22
    1ebe:	82 9f       	mul	r24, r18
    1ec0:	22 27       	eor	r18, r18
    1ec2:	b0 0d       	add	r27, r0
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	62 1f       	adc	r22, r18
    1ec8:	73 9f       	mul	r23, r19
    1eca:	b0 0d       	add	r27, r0
    1ecc:	a1 1d       	adc	r26, r1
    1ece:	62 1f       	adc	r22, r18
    1ed0:	83 9f       	mul	r24, r19
    1ed2:	a0 0d       	add	r26, r0
    1ed4:	61 1d       	adc	r22, r1
    1ed6:	22 1f       	adc	r18, r18
    1ed8:	74 9f       	mul	r23, r20
    1eda:	33 27       	eor	r19, r19
    1edc:	a0 0d       	add	r26, r0
    1ede:	61 1d       	adc	r22, r1
    1ee0:	23 1f       	adc	r18, r19
    1ee2:	84 9f       	mul	r24, r20
    1ee4:	60 0d       	add	r22, r0
    1ee6:	21 1d       	adc	r18, r1
    1ee8:	82 2f       	mov	r24, r18
    1eea:	76 2f       	mov	r23, r22
    1eec:	6a 2f       	mov	r22, r26
    1eee:	11 24       	eor	r1, r1
    1ef0:	9f 57       	subi	r25, 0x7F	; 127
    1ef2:	50 40       	sbci	r21, 0x00	; 0
    1ef4:	8a f0       	brmi	.+34     	; 0x1f18 <__mulsf3_pse+0x84>
    1ef6:	e1 f0       	breq	.+56     	; 0x1f30 <__mulsf3_pse+0x9c>
    1ef8:	88 23       	and	r24, r24
    1efa:	4a f0       	brmi	.+18     	; 0x1f0e <__mulsf3_pse+0x7a>
    1efc:	ee 0f       	add	r30, r30
    1efe:	ff 1f       	adc	r31, r31
    1f00:	bb 1f       	adc	r27, r27
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	a9 f7       	brne	.-22     	; 0x1ef8 <__mulsf3_pse+0x64>
    1f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f10:	51 05       	cpc	r21, r1
    1f12:	70 f0       	brcs	.+28     	; 0x1f30 <__mulsf3_pse+0x9c>
    1f14:	5c cf       	rjmp	.-328    	; 0x1dce <__fp_inf>
    1f16:	a6 cf       	rjmp	.-180    	; 0x1e64 <__fp_szero>
    1f18:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1a:	ec f3       	brlt	.-6      	; 0x1f16 <__mulsf3_pse+0x82>
    1f1c:	98 3e       	cpi	r25, 0xE8	; 232
    1f1e:	dc f3       	brlt	.-10     	; 0x1f16 <__mulsf3_pse+0x82>
    1f20:	86 95       	lsr	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	b7 95       	ror	r27
    1f28:	f7 95       	ror	r31
    1f2a:	e7 95       	ror	r30
    1f2c:	9f 5f       	subi	r25, 0xFF	; 255
    1f2e:	c1 f7       	brne	.-16     	; 0x1f20 <__mulsf3_pse+0x8c>
    1f30:	fe 2b       	or	r31, r30
    1f32:	88 0f       	add	r24, r24
    1f34:	91 1d       	adc	r25, r1
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	08 95       	ret

00001f3e <__unordsf2>:
    1f3e:	23 df       	rcall	.-442    	; 0x1d86 <__fp_cmp>
    1f40:	88 0b       	sbc	r24, r24
    1f42:	99 0b       	sbc	r25, r25
    1f44:	08 95       	ret

00001f46 <__udivmodsi4>:
    1f46:	a1 e2       	ldi	r26, 0x21	; 33
    1f48:	1a 2e       	mov	r1, r26
    1f4a:	aa 1b       	sub	r26, r26
    1f4c:	bb 1b       	sub	r27, r27
    1f4e:	fd 01       	movw	r30, r26
    1f50:	0d c0       	rjmp	.+26     	; 0x1f6c <__udivmodsi4_ep>

00001f52 <__udivmodsi4_loop>:
    1f52:	aa 1f       	adc	r26, r26
    1f54:	bb 1f       	adc	r27, r27
    1f56:	ee 1f       	adc	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	a2 17       	cp	r26, r18
    1f5c:	b3 07       	cpc	r27, r19
    1f5e:	e4 07       	cpc	r30, r20
    1f60:	f5 07       	cpc	r31, r21
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <__udivmodsi4_ep>
    1f64:	a2 1b       	sub	r26, r18
    1f66:	b3 0b       	sbc	r27, r19
    1f68:	e4 0b       	sbc	r30, r20
    1f6a:	f5 0b       	sbc	r31, r21

00001f6c <__udivmodsi4_ep>:
    1f6c:	66 1f       	adc	r22, r22
    1f6e:	77 1f       	adc	r23, r23
    1f70:	88 1f       	adc	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	1a 94       	dec	r1
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <__udivmodsi4_loop>
    1f78:	60 95       	com	r22
    1f7a:	70 95       	com	r23
    1f7c:	80 95       	com	r24
    1f7e:	90 95       	com	r25
    1f80:	9b 01       	movw	r18, r22
    1f82:	ac 01       	movw	r20, r24
    1f84:	bd 01       	movw	r22, r26
    1f86:	cf 01       	movw	r24, r30
    1f88:	08 95       	ret

00001f8a <__tablejump2__>:
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31

00001f8e <__tablejump__>:
    1f8e:	05 90       	lpm	r0, Z+
    1f90:	f4 91       	lpm	r31, Z
    1f92:	e0 2d       	mov	r30, r0
    1f94:	09 94       	ijmp

00001f96 <__muluhisi3>:
    1f96:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__umulhisi3>
    1f9a:	a5 9f       	mul	r26, r21
    1f9c:	90 0d       	add	r25, r0
    1f9e:	b4 9f       	mul	r27, r20
    1fa0:	90 0d       	add	r25, r0
    1fa2:	a4 9f       	mul	r26, r20
    1fa4:	80 0d       	add	r24, r0
    1fa6:	91 1d       	adc	r25, r1
    1fa8:	11 24       	eor	r1, r1
    1faa:	08 95       	ret

00001fac <__umulhisi3>:
    1fac:	a2 9f       	mul	r26, r18
    1fae:	b0 01       	movw	r22, r0
    1fb0:	b3 9f       	mul	r27, r19
    1fb2:	c0 01       	movw	r24, r0
    1fb4:	a3 9f       	mul	r26, r19
    1fb6:	70 0d       	add	r23, r0
    1fb8:	81 1d       	adc	r24, r1
    1fba:	11 24       	eor	r1, r1
    1fbc:	91 1d       	adc	r25, r1
    1fbe:	b2 9f       	mul	r27, r18
    1fc0:	70 0d       	add	r23, r0
    1fc2:	81 1d       	adc	r24, r1
    1fc4:	11 24       	eor	r1, r1
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	08 95       	ret

00001fca <_exit>:
    1fca:	f8 94       	cli

00001fcc <__stop_program>:
    1fcc:	ff cf       	rjmp	.-2      	; 0x1fcc <__stop_program>
